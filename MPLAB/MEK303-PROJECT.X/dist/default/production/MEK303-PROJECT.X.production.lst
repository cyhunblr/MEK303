

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sun Dec 31 17:07:52 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2
    28                           	psect	text19,local,class=CODE,merge=1,delta=2
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31     0000                     
    32                           ; Generated 18/08/2023 GMT
    33                           ; 
    34                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F877A Definitions
    64                           ; 
    65                           ; SFR Addresses
    66     0000                     	;# 
    67     0001                     	;# 
    68     0002                     	;# 
    69     0003                     	;# 
    70     0004                     	;# 
    71     0005                     	;# 
    72     0006                     	;# 
    73     0007                     	;# 
    74     0008                     	;# 
    75     0009                     	;# 
    76     000A                     	;# 
    77     000B                     	;# 
    78     000C                     	;# 
    79     000D                     	;# 
    80     000E                     	;# 
    81     000E                     	;# 
    82     000F                     	;# 
    83     0010                     	;# 
    84     0011                     	;# 
    85     0012                     	;# 
    86     0013                     	;# 
    87     0014                     	;# 
    88     0015                     	;# 
    89     0015                     	;# 
    90     0016                     	;# 
    91     0017                     	;# 
    92     0018                     	;# 
    93     0019                     	;# 
    94     001A                     	;# 
    95     001B                     	;# 
    96     001B                     	;# 
    97     001C                     	;# 
    98     001D                     	;# 
    99     001E                     	;# 
   100     001F                     	;# 
   101     0081                     	;# 
   102     0085                     	;# 
   103     0086                     	;# 
   104     0087                     	;# 
   105     0088                     	;# 
   106     0089                     	;# 
   107     008C                     	;# 
   108     008D                     	;# 
   109     008E                     	;# 
   110     0091                     	;# 
   111     0092                     	;# 
   112     0093                     	;# 
   113     0094                     	;# 
   114     0098                     	;# 
   115     0099                     	;# 
   116     009C                     	;# 
   117     009D                     	;# 
   118     009E                     	;# 
   119     009F                     	;# 
   120     010C                     	;# 
   121     010D                     	;# 
   122     010E                     	;# 
   123     010F                     	;# 
   124     018C                     	;# 
   125     018D                     	;# 
   126     0000                     	;# 
   127     0001                     	;# 
   128     0002                     	;# 
   129     0003                     	;# 
   130     0004                     	;# 
   131     0005                     	;# 
   132     0006                     	;# 
   133     0007                     	;# 
   134     0008                     	;# 
   135     0009                     	;# 
   136     000A                     	;# 
   137     000B                     	;# 
   138     000C                     	;# 
   139     000D                     	;# 
   140     000E                     	;# 
   141     000E                     	;# 
   142     000F                     	;# 
   143     0010                     	;# 
   144     0011                     	;# 
   145     0012                     	;# 
   146     0013                     	;# 
   147     0014                     	;# 
   148     0015                     	;# 
   149     0015                     	;# 
   150     0016                     	;# 
   151     0017                     	;# 
   152     0018                     	;# 
   153     0019                     	;# 
   154     001A                     	;# 
   155     001B                     	;# 
   156     001B                     	;# 
   157     001C                     	;# 
   158     001D                     	;# 
   159     001E                     	;# 
   160     001F                     	;# 
   161     0081                     	;# 
   162     0085                     	;# 
   163     0086                     	;# 
   164     0087                     	;# 
   165     0088                     	;# 
   166     0089                     	;# 
   167     008C                     	;# 
   168     008D                     	;# 
   169     008E                     	;# 
   170     0091                     	;# 
   171     0092                     	;# 
   172     0093                     	;# 
   173     0094                     	;# 
   174     0098                     	;# 
   175     0099                     	;# 
   176     009C                     	;# 
   177     009D                     	;# 
   178     009E                     	;# 
   179     009F                     	;# 
   180     010C                     	;# 
   181     010D                     	;# 
   182     010E                     	;# 
   183     010F                     	;# 
   184     018C                     	;# 
   185     018D                     	;# 
   186                           
   187                           	psect	strings
   188     0003                     __pstrings:
   189     0003                     stringtab:
   190     0003                     __stringtab:
   191                           
   192                           ;	String table - string pointers are 1 byte each
   193     0003  1BFF               	btfsc	btemp+1,7
   194     0004  280D               	ljmp	stringcode
   195     0005  1383               	bcf	3,7
   196     0006  187F               	btfsc	btemp+1,0
   197     0007  1783               	bsf	3,7
   198     0008  0800               	movf	0,w
   199     0009  0A84               	incf	4,f
   200     000A  1903               	skipnz
   201     000B  0AFF               	incf	btemp+1,f
   202     000C  0008               	return
   203     000D                     stringcode:
   204     000D                     stringdir:
   205     000D  3000               	movlw	high stringdir
   206     000E  008A               	movwf	10
   207     000F  0804               	movf	4,w
   208     0010  0A84               	incf	4,f
   209     0011  0782               	addwf	2,f
   210     0012                     __stringbase:
   211     0012  3400               	retlw	0
   212     0013                     __end_of__stringtab:
   213     0013                     _dpowers:
   214     0013  3401               	retlw	1
   215     0014  3400               	retlw	0
   216     0015  340A               	retlw	10
   217     0016  3400               	retlw	0
   218     0017  3464               	retlw	100
   219     0018  3400               	retlw	0
   220     0019  34E8               	retlw	232
   221     001A  3403               	retlw	3
   222     001B  3410               	retlw	16
   223     001C  3427               	retlw	39
   224     001D                     __end_of_dpowers:
   225     0007                     _PORTCbits	set	7
   226     0006                     _PORTBbits	set	6
   227     0011                     _TMR2	set	17
   228     0012                     _T2CON	set	18
   229     0017                     _CCP1CON	set	23
   230     001E                     _ADRESH	set	30
   231     001F                     _ADCON0bits	set	31
   232     0008                     _PORTD	set	8
   233     0007                     _PORTC	set	7
   234     0006                     _PORTB	set	6
   235     0015                     _CCPR1L	set	21
   236     00BC                     _CCP1Y	set	188
   237     00BD                     _CCP1X	set	189
   238     0032                     _RB2	set	50
   239     0030                     _RB0	set	48
   240     0047                     _RD7	set	71
   241     0046                     _RD6	set	70
   242     0045                     _RD5	set	69
   243     0044                     _RD4	set	68
   244     0092                     _PR2	set	146
   245     009E                     _ADRESL	set	158
   246     009F                     _ADCON1bits	set	159
   247     0088                     _TRISD	set	136
   248     0087                     _TRISC	set	135
   249     0086                     _TRISB	set	134
   250     0085                     _TRISA	set	133
   251     001D                     STR_1:
   252     001D  3441               	retlw	65	;'A'
   253     001E  3448               	retlw	72	;'H'
   254     001F  344D               	retlw	77	;'M'
   255     0020  3445               	retlw	69	;'E'
   256     0021  3454               	retlw	84	;'T'
   257     0022  3420               	retlw	32	;' '
   258     0023  3443               	retlw	67	;'C'
   259     0024  342E               	retlw	46	;'.'
   260     0025  3420               	retlw	32	;' '
   261     0026  3442               	retlw	66	;'B'
   262     0027  3449               	retlw	73	;'I'
   263     0028  344C               	retlw	76	;'L'
   264     0029  3449               	retlw	73	;'I'
   265     002A  3452               	retlw	82	;'R'
   266     002B  3400               	retlw	0
   267     002C                     STR_2:
   268     002C  3442               	retlw	66	;'B'
   269     002D  3432               	retlw	50	;'2'
   270     002E  3430               	retlw	48	;'0'
   271     002F  3430               	retlw	48	;'0'
   272     0030  3431               	retlw	49	;'1'
   273     0031  3430               	retlw	48	;'0'
   274     0032  3434               	retlw	52	;'4'
   275     0033  3430               	retlw	48	;'0'
   276     0034  3432               	retlw	50	;'2'
   277     0035  3439               	retlw	57	;'9'
   278     0036  3400               	retlw	0
   279     0037                     STR_5:
   280     0037  3459               	retlw	89	;'Y'
   281     0038  344F               	retlw	79	;'O'
   282     0039  344E               	retlw	78	;'N'
   283     003A  343A               	retlw	58	;':'
   284     003B  3420               	retlw	32	;' '
   285     003C  342D               	retlw	45	;'-'
   286     003D  342D               	retlw	45	;'-'
   287     003E  342D               	retlw	45	;'-'
   288     003F  3400               	retlw	0
   289     0040                     STR_4:
   290     0040  3448               	retlw	72	;'H'
   291     0041  3449               	retlw	73	;'I'
   292     0042  345A               	retlw	90	;'Z'
   293     0043  343A               	retlw	58	;':'
   294     0044  3420               	retlw	32	;' '
   295     0045  3425               	retlw	37	;'%'
   296     0046  3400               	retlw	0
   297     0047                     STR_3:
   298     0047  3425               	retlw	37	;'%'
   299     0048  3464               	retlw	100	;'d'
   300     0049  3400               	retlw	0
   301     0040                     
   302                           	psect	cinit
   303     07FC                     start_initialization:	
   304                           ; #config settings
   305                           
   306     07FC                     __initialization:
   307     07FC                     end_of_initialization:	
   308                           ;End of C runtime variable initialization code
   309                           
   310     07FC                     __end_of__initialization:
   311     07FC  0183               	clrf	3
   312     07FD  120A  118A  2E03   	ljmp	_main	;jump to C main() function
   313                           
   314                           	psect	cstackBANK1
   315     00A0                     __pcstackBANK1:
   316     00A0                     main@char_digital:
   317                           
   318                           ; 15 bytes @ 0x0
   319     00A0                     	ds	15
   320     00AF                     main@voltage_coefficent:
   321                           
   322                           ; 3 bytes @ 0xF
   323     00AF                     	ds	3
   324     00B2                     main@voltage:
   325                           
   326                           ; 3 bytes @ 0x12
   327     00B2                     	ds	3
   328     00B5                     main@counter:
   329                           
   330                           ; 2 bytes @ 0x15
   331     00B5                     	ds	2
   332     00B7                     main@rotate:
   333                           
   334                           ; 2 bytes @ 0x17
   335     00B7                     	ds	2
   336     00B9                     main@digital:
   337                           
   338                           ; 3 bytes @ 0x19
   339     00B9                     	ds	3
   340     00BC                     main@speed:
   341                           
   342                           ; 2 bytes @ 0x1C
   343     00BC                     	ds	2
   344                           
   345                           	psect	cstackCOMMON
   346     0070                     __pcstackCOMMON:
   347     0070                     ?_Lcd_Port:
   348     0070                     ??_Lcd_Port:	
   349                           ; 1 bytes @ 0x0
   350                           
   351     0070                     ?_Lcd_Cmd:	
   352                           ; 1 bytes @ 0x0
   353                           
   354     0070                     ?_Lcd_Clear:	
   355                           ; 1 bytes @ 0x0
   356                           
   357     0070                     ?_Lcd_Init:	
   358                           ; 1 bytes @ 0x0
   359                           
   360     0070                     ?_Lcd_Write_Char:	
   361                           ; 1 bytes @ 0x0
   362                           
   363     0070                     ?_main:	
   364                           ; 1 bytes @ 0x0
   365                           
   366     0070                     ?___lwdiv:	
   367                           ; 1 bytes @ 0x0
   368                           
   369     0070                     ?___ftpack:	
   370                           ; 2 bytes @ 0x0
   371                           
   372     0070                     Lcd_Port@a:	
   373                           ; 3 bytes @ 0x0
   374                           
   375     0070                     ___lwdiv@divisor:	
   376                           ; 1 bytes @ 0x0
   377                           
   378     0070                     ___ftpack@arg:	
   379                           ; 2 bytes @ 0x0
   380                           
   381                           
   382                           ; 3 bytes @ 0x0
   383     0070                     	ds	1
   384     0071                     ??_Lcd_Cmd:
   385     0071                     ??_Lcd_Write_Char:	
   386                           ; 1 bytes @ 0x1
   387                           
   388                           
   389                           ; 1 bytes @ 0x1
   390     0071                     	ds	1
   391     0072                     Lcd_Write_Char@temp:
   392     0072                     ___lwdiv@dividend:	
   393                           ; 1 bytes @ 0x2
   394                           
   395                           
   396                           ; 2 bytes @ 0x2
   397     0072                     	ds	1
   398     0073                     Lcd_Cmd@a:
   399     0073                     Lcd_Write_Char@y:	
   400                           ; 1 bytes @ 0x3
   401                           
   402     0073                     ___ftpack@exp:	
   403                           ; 1 bytes @ 0x3
   404                           
   405                           
   406                           ; 1 bytes @ 0x3
   407     0073                     	ds	1
   408     0074                     ??_Lcd_Clear:
   409     0074                     ?_Lcd_Set_Cursor:	
   410                           ; 1 bytes @ 0x4
   411                           
   412     0074                     ??_Lcd_Init:	
   413                           ; 1 bytes @ 0x4
   414                           
   415     0074                     ??___lwdiv:	
   416                           ; 1 bytes @ 0x4
   417                           
   418     0074                     Lcd_Set_Cursor@b:	
   419                           ; 1 bytes @ 0x4
   420                           
   421     0074                     Lcd_Write_Char@a:	
   422                           ; 1 bytes @ 0x4
   423                           
   424     0074                     ___ftpack@sign:	
   425                           ; 1 bytes @ 0x4
   426                           
   427     0074                     ___lwdiv@quotient:	
   428                           ; 1 bytes @ 0x4
   429                           
   430                           
   431                           ; 2 bytes @ 0x4
   432     0074                     	ds	1
   433     0075                     ??___ftpack:
   434     0075                     ??_Lcd_Set_Cursor:	
   435                           ; 1 bytes @ 0x5
   436                           
   437     0075                     ?_Lcd_Write_String:	
   438                           ; 1 bytes @ 0x5
   439                           
   440     0075                     Lcd_Write_String@a:	
   441                           ; 1 bytes @ 0x5
   442                           
   443                           
   444                           ; 2 bytes @ 0x5
   445     0075                     	ds	1
   446     0076                     Lcd_Set_Cursor@a:
   447     0076                     ___lwdiv@counter:	
   448                           ; 1 bytes @ 0x6
   449                           
   450                           
   451                           ; 1 bytes @ 0x6
   452     0076                     	ds	1
   453     0077                     ??_Lcd_Write_String:
   454     0077                     ?___lwmod:	
   455                           ; 1 bytes @ 0x7
   456                           
   457     0077                     Lcd_Set_Cursor@z:	
   458                           ; 2 bytes @ 0x7
   459                           
   460     0077                     ___lwmod@divisor:	
   461                           ; 1 bytes @ 0x7
   462                           
   463                           
   464                           ; 2 bytes @ 0x7
   465     0077                     	ds	1
   466     0078                     ?___awtoft:
   467     0078                     ?___ftadd:	
   468                           ; 3 bytes @ 0x8
   469                           
   470     0078                     Lcd_Set_Cursor@y:	
   471                           ; 3 bytes @ 0x8
   472                           
   473     0078                     ___awtoft@c:	
   474                           ; 1 bytes @ 0x8
   475                           
   476     0078                     ___ftadd@f1:	
   477                           ; 2 bytes @ 0x8
   478                           
   479                           
   480                           ; 3 bytes @ 0x8
   481     0078                     	ds	1
   482     0079                     Lcd_Set_Cursor@temp:
   483     0079                     ___lwmod@dividend:	
   484                           ; 1 bytes @ 0x9
   485                           
   486                           
   487                           ; 2 bytes @ 0x9
   488     0079                     	ds	1
   489     007A                     Lcd_Write_String@i:
   490                           
   491                           ; 2 bytes @ 0xA
   492     007A                     	ds	1
   493     007B                     ??___awtoft:
   494     007B                     ??___lwmod:	
   495                           ; 1 bytes @ 0xB
   496                           
   497     007B                     ___awtoft@sign:	
   498                           ; 1 bytes @ 0xB
   499                           
   500     007B                     ___lwmod@counter:	
   501                           ; 1 bytes @ 0xB
   502                           
   503     007B                     ___ftadd@f2:	
   504                           ; 1 bytes @ 0xB
   505                           
   506                           
   507                           ; 3 bytes @ 0xB
   508     007B                     	ds	3
   509     007E                     ??_map:
   510     007E                     ??___ftsub:	
   511                           ; 1 bytes @ 0xE
   512                           
   513                           
   514                           	psect	cstackBANK0
   515     0020                     __pcstackBANK0:	
   516                           ; 1 bytes @ 0xE
   517                           
   518     0020                     ??___ftadd:
   519     0020                     ?_sprintf:	
   520                           ; 1 bytes @ 0x0
   521                           
   522     0020                     sprintf@f:	
   523                           ; 2 bytes @ 0x0
   524                           
   525                           
   526                           ; 1 bytes @ 0x0
   527     0020                     	ds	3
   528     0023                     ??_sprintf:
   529     0023                     ___ftadd@sign:	
   530                           ; 1 bytes @ 0x3
   531                           
   532                           
   533                           ; 1 bytes @ 0x3
   534     0023                     	ds	1
   535     0024                     ___ftadd@exp2:
   536                           
   537                           ; 1 bytes @ 0x4
   538     0024                     	ds	1
   539     0025                     ___ftadd@exp1:
   540                           
   541                           ; 1 bytes @ 0x5
   542     0025                     	ds	1
   543     0026                     ?___ftsub:
   544     0026                     sprintf@ap:	
   545                           ; 3 bytes @ 0x6
   546                           
   547     0026                     ___ftsub@f2:	
   548                           ; 1 bytes @ 0x6
   549                           
   550                           
   551                           ; 3 bytes @ 0x6
   552     0026                     	ds	1
   553     0027                     sprintf@flag:
   554                           
   555                           ; 1 bytes @ 0x7
   556     0027                     	ds	1
   557     0028                     sprintf@prec:
   558                           
   559                           ; 1 bytes @ 0x8
   560     0028                     	ds	1
   561     0029                     sprintf@val:
   562     0029                     ___ftsub@f1:	
   563                           ; 2 bytes @ 0x9
   564                           
   565                           
   566                           ; 3 bytes @ 0x9
   567     0029                     	ds	2
   568     002B                     sprintf@sp:
   569                           
   570                           ; 1 bytes @ 0xB
   571     002B                     	ds	1
   572     002C                     ?___ftmul:
   573     002C                     sprintf@c:	
   574                           ; 3 bytes @ 0xC
   575                           
   576     002C                     ___ftmul@f1:	
   577                           ; 1 bytes @ 0xC
   578                           
   579                           
   580                           ; 3 bytes @ 0xC
   581     002C                     	ds	3
   582     002F                     ___ftmul@f2:
   583                           
   584                           ; 3 bytes @ 0xF
   585     002F                     	ds	3
   586     0032                     ??___ftmul:
   587                           
   588                           ; 1 bytes @ 0x12
   589     0032                     	ds	3
   590     0035                     ___ftmul@exp:
   591                           
   592                           ; 1 bytes @ 0x15
   593     0035                     	ds	1
   594     0036                     ___ftmul@f3_as_product:
   595                           
   596                           ; 3 bytes @ 0x16
   597     0036                     	ds	3
   598     0039                     ___ftmul@cntr:
   599                           
   600                           ; 1 bytes @ 0x19
   601     0039                     	ds	1
   602     003A                     ___ftmul@sign:
   603                           
   604                           ; 1 bytes @ 0x1A
   605     003A                     	ds	1
   606     003B                     ?___ftdiv:
   607     003B                     ___ftdiv@f2:	
   608                           ; 3 bytes @ 0x1B
   609                           
   610                           
   611                           ; 3 bytes @ 0x1B
   612     003B                     	ds	3
   613     003E                     ___ftdiv@f1:
   614                           
   615                           ; 3 bytes @ 0x1E
   616     003E                     	ds	3
   617     0041                     ??___ftdiv:
   618                           
   619                           ; 1 bytes @ 0x21
   620     0041                     	ds	3
   621     0044                     ___ftdiv@cntr:
   622                           
   623                           ; 1 bytes @ 0x24
   624     0044                     	ds	1
   625     0045                     ___ftdiv@f3:
   626                           
   627                           ; 3 bytes @ 0x25
   628     0045                     	ds	3
   629     0048                     ___ftdiv@exp:
   630                           
   631                           ; 1 bytes @ 0x28
   632     0048                     	ds	1
   633     0049                     ___ftdiv@sign:
   634                           
   635                           ; 1 bytes @ 0x29
   636     0049                     	ds	1
   637     004A                     ?___fttol:
   638     004A                     ___fttol@f1:	
   639                           ; 4 bytes @ 0x2A
   640                           
   641                           
   642                           ; 3 bytes @ 0x2A
   643     004A                     	ds	4
   644     004E                     ??___fttol:
   645                           
   646                           ; 1 bytes @ 0x2E
   647     004E                     	ds	3
   648     0051                     ___fttol@sign1:
   649                           
   650                           ; 1 bytes @ 0x31
   651     0051                     	ds	1
   652     0052                     ___fttol@lval:
   653                           
   654                           ; 4 bytes @ 0x32
   655     0052                     	ds	4
   656     0056                     ___fttol@exp1:
   657                           
   658                           ; 1 bytes @ 0x36
   659     0056                     	ds	1
   660     0057                     ?_duty_send:
   661     0057                     ?_map:	
   662                           ; 1 bytes @ 0x37
   663                           
   664     0057                     duty_send@deger:	
   665                           ; 2 bytes @ 0x37
   666                           
   667     0057                     map@x:	
   668                           ; 2 bytes @ 0x37
   669                           
   670                           
   671                           ; 3 bytes @ 0x37
   672     0057                     	ds	2
   673     0059                     ??_duty_send:
   674                           
   675                           ; 1 bytes @ 0x39
   676     0059                     	ds	1
   677     005A                     map@in_min:
   678                           
   679                           ; 3 bytes @ 0x3A
   680     005A                     	ds	3
   681     005D                     map@in_max:
   682                           
   683                           ; 3 bytes @ 0x3D
   684     005D                     	ds	3
   685     0060                     map@out_min:
   686                           
   687                           ; 3 bytes @ 0x40
   688     0060                     	ds	3
   689     0063                     map@out_max:
   690                           
   691                           ; 3 bytes @ 0x43
   692     0063                     	ds	3
   693     0066                     _map$850:
   694                           
   695                           ; 3 bytes @ 0x46
   696     0066                     	ds	3
   697     0069                     ??_main:
   698                           
   699                           ; 1 bytes @ 0x49
   700     0069                     	ds	3
   701                           
   702                           	psect	maintext
   703     0603                     __pmaintext:	
   704 ;;
   705 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   706 ;;
   707 ;; *************** function _main *****************
   708 ;; Defined at:
   709 ;;		line 156 in file "MEK303-PROJECT.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;		None
   712 ;; Auto vars:     Size  Location     Type
   713 ;;  dutty           2    0        int 
   714 ;;  char_digital   15    0[BANK1 ] unsigned char [15]
   715 ;;  digital         3   25[BANK1 ] float 
   716 ;;  voltage         3   18[BANK1 ] float 
   717 ;;  voltage_coef    3   15[BANK1 ] float 
   718 ;;  speed           2   28[BANK1 ] int 
   719 ;;  rotate          2   23[BANK1 ] int 
   720 ;;  counter         2   21[BANK1 ] int 
   721 ;; Return value:  Size  Location     Type
   722 ;;                  1    wreg      void 
   723 ;; Registers used:
   724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   725 ;; Tracked objects:
   726 ;;		On entry : B00/0
   727 ;;		On exit  : 300/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   730 ;;      Params:         0       0       0       0       0
   731 ;;      Locals:         0       0      30       0       0
   732 ;;      Temps:          0       3       0       0       0
   733 ;;      Totals:         0       3      30       0       0
   734 ;;Total ram usage:       33 bytes
   735 ;; Hardware stack levels required when called: 4
   736 ;; This function calls:
   737 ;;		_Lcd_Clear
   738 ;;		_Lcd_Init
   739 ;;		_Lcd_Set_Cursor
   740 ;;		_Lcd_Write_String
   741 ;;		___awtoft
   742 ;;		___ftmul
   743 ;;		___fttol
   744 ;;		_duty_send
   745 ;;		_map
   746 ;;		_sprintf
   747 ;; This function is called by:
   748 ;;		Startup code after reset
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752     0603                     _main:	
   753                           ;psect for function _main
   754                           
   755                           
   756                           ;MEK303-PROJECT.c: 159: float voltage_coefficent = 0.0048;
   757                           
   758                           ;incstack = 0
   759                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   760     0603  3049               	movlw	73
   761     0604  1683               	bsf	3,5	;RP0=1, select bank1
   762     0605  00AF               	movwf	main@voltage_coefficent^(0+128)
   763     0606  309D               	movlw	157
   764     0607  00B0               	movwf	(main@voltage_coefficent+1)^(0+128)
   765     0608  303B               	movlw	59
   766     0609  00B1               	movwf	(main@voltage_coefficent+2)^(0+128)
   767                           
   768                           ;MEK303-PROJECT.c: 160: float voltage = 0.0;
   769     060A  3000               	movlw	0
   770     060B  00B2               	movwf	main@voltage^(0+128)
   771     060C  3000               	movlw	0
   772     060D  00B3               	movwf	(main@voltage+1)^(0+128)
   773     060E  3000               	movlw	0
   774     060F  00B4               	movwf	(main@voltage+2)^(0+128)
   775                           
   776                           ;MEK303-PROJECT.c: 163: int counter = 0;
   777     0610  01B5               	clrf	main@counter^(0+128)
   778     0611  01B6               	clrf	(main@counter+1)^(0+128)
   779                           
   780                           ;MEK303-PROJECT.c: 164: int rotate = 0;
   781     0612  01B7               	clrf	main@rotate^(0+128)
   782     0613  01B8               	clrf	(main@rotate+1)^(0+128)
   783                           
   784                           ;MEK303-PROJECT.c: 165: TRISA=0XFF;
   785     0614  30FF               	movlw	255
   786     0615  0085               	movwf	5	;volatile
   787                           
   788                           ;MEK303-PROJECT.c: 166: TRISB=0xC0;
   789     0616  30C0               	movlw	192
   790     0617  0086               	movwf	6	;volatile
   791                           
   792                           ;MEK303-PROJECT.c: 167: TRISC=0X00;
   793     0618  0187               	clrf	7	;volatile
   794                           
   795                           ;MEK303-PROJECT.c: 168: TRISD=0X00;
   796     0619  0188               	clrf	8	;volatile
   797                           
   798                           ;MEK303-PROJECT.c: 170: PORTB=0X00;
   799     061A  1283               	bcf	3,5	;RP0=0, select bank0
   800     061B  0186               	clrf	6	;volatile
   801                           
   802                           ;MEK303-PROJECT.c: 171: PORTC=0X00;
   803     061C  0187               	clrf	7	;volatile
   804                           
   805                           ;MEK303-PROJECT.c: 172: PORTD=0X00;
   806     061D  0188               	clrf	8	;volatile
   807                           
   808                           ;MEK303-PROJECT.c: 174: Lcd_Init();
   809     061E  120A  118A  2161  120A  118A  	fcall	_Lcd_Init
   810                           
   811                           ;MEK303-PROJECT.c: 176: ADCON0bits.ADON = 1;
   812     0623  141F               	bsf	31,0	;volatile
   813                           
   814                           ;MEK303-PROJECT.c: 177: ADCON1bits.PCFG0 = 0;
   815     0624  1683               	bsf	3,5	;RP0=1, select bank1
   816     0625  101F               	bcf	31,0	;volatile
   817                           
   818                           ;MEK303-PROJECT.c: 178: ADCON1bits.PCFG1 = 0;
   819     0626  109F               	bcf	31,1	;volatile
   820                           
   821                           ;MEK303-PROJECT.c: 180: ADCON1bits.PCFG2 = 0;
   822     0627  111F               	bcf	31,2	;volatile
   823                           
   824                           ;MEK303-PROJECT.c: 181: ADCON1bits.PCFG3 = 0;
   825     0628  119F               	bcf	31,3	;volatile
   826                           
   827                           ;MEK303-PROJECT.c: 182: ADCON1bits.ADFM = 1;
   828     0629  179F               	bsf	31,7	;volatile
   829     062A                     l1798:
   830                           
   831                           ;MEK303-PROJECT.c: 185: {;MEK303-PROJECT.c: 187: if (counter == 0)
   832     062A  1683               	bsf	3,5	;RP0=1, select bank1
   833     062B  0835               	movf	main@counter^(0+128),w
   834     062C  0436               	iorwf	(main@counter+1)^(0+128),w
   835     062D  1D03               	btfss	3,2
   836     062E  2E6B               	goto	l1812
   837                           
   838                           ;MEK303-PROJECT.c: 188: {;MEK303-PROJECT.c: 189: Lcd_Set_Cursor(1,2);
   839     062F  3002               	movlw	2
   840     0630  00F4               	movwf	Lcd_Set_Cursor@b
   841     0631  3001               	movlw	1
   842     0632  120A  118A  2123  120A  118A  	fcall	_Lcd_Set_Cursor
   843                           
   844                           ;MEK303-PROJECT.c: 190: Lcd_Write_String("AHMET C. BILIR");
   845     0637  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   846     0638  00F5               	movwf	Lcd_Write_String@a
   847     0639  3080               	movlw	128
   848     063A  00F6               	movwf	Lcd_Write_String@a+1
   849     063B  120A  118A  20E6  120A  118A  	fcall	_Lcd_Write_String
   850                           
   851                           ;MEK303-PROJECT.c: 191: Lcd_Set_Cursor(2,4);
   852     0640  3004               	movlw	4
   853     0641  00F4               	movwf	Lcd_Set_Cursor@b
   854     0642  3002               	movlw	2
   855     0643  120A  118A  2123  120A  118A  	fcall	_Lcd_Set_Cursor
   856                           
   857                           ;MEK303-PROJECT.c: 192: Lcd_Write_String("B200104029");
   858     0648  301A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   859     0649  00F5               	movwf	Lcd_Write_String@a
   860     064A  3080               	movlw	128
   861     064B  00F6               	movwf	Lcd_Write_String@a+1
   862     064C  120A  118A  20E6  120A  118A  	fcall	_Lcd_Write_String
   863                           
   864                           ;MEK303-PROJECT.c: 193: _delay((unsigned long)((3000)*(4000000/4000.0)));
   865     0651  3010               	movlw	16
   866     0652  1283               	bcf	3,5	;RP0=0, select bank0
   867     0653  1303               	bcf	3,6	;RP1=0, select bank0
   868     0654  00EB               	movwf	??_main+2
   869     0655  3039               	movlw	57
   870     0656  00EA               	movwf	??_main+1
   871     0657  300D               	movlw	13
   872     0658  00E9               	movwf	??_main
   873     0659                     u2217:
   874     0659  0BE9               	decfsz	??_main,f
   875     065A  2E59               	goto	u2217
   876     065B  0BEA               	decfsz	??_main+1,f
   877     065C  2E59               	goto	u2217
   878     065D  0BEB               	decfsz	??_main+2,f
   879     065E  2E59               	goto	u2217
   880                           
   881                           ;MEK303-PROJECT.c: 194: Lcd_Clear();
   882     065F  120A  158A  2776  120A  118A  	fcall	_Lcd_Clear
   883                           
   884                           ;MEK303-PROJECT.c: 195: counter++;
   885     0664  3001               	movlw	1
   886     0665  1683               	bsf	3,5	;RP0=1, select bank1
   887     0666  07B5               	addwf	main@counter^(0+128),f
   888     0667  1803               	skipnc
   889     0668  0AB6               	incf	(main@counter+1)^(0+128),f
   890     0669  3000               	movlw	0
   891     066A  07B6               	addwf	(main@counter+1)^(0+128),f
   892     066B                     l1812:
   893                           
   894                           ;MEK303-PROJECT.c: 196: };MEK303-PROJECT.c: 198: ADCON0bits.CHS2=0;
   895     066B  1283               	bcf	3,5	;RP0=0, select bank0
   896     066C  129F               	bcf	31,5	;volatile
   897                           
   898                           ;MEK303-PROJECT.c: 199: ADCON0bits.CHS1=0;
   899     066D  121F               	bcf	31,4	;volatile
   900                           
   901                           ;MEK303-PROJECT.c: 200: ADCON0bits.CHS0=0;
   902     066E  119F               	bcf	31,3	;volatile
   903                           
   904                           ;MEK303-PROJECT.c: 201: ADCON0bits.GO =1;
   905     066F  151F               	bsf	31,2	;volatile
   906     0670                     l104:	
   907                           ;MEK303-PROJECT.c: 202: while(ADCON0bits.GO_nDONE);
   908                           
   909     0670  191F               	btfsc	31,2	;volatile
   910     0671  2E70               	goto	l104
   911                           
   912                           ;MEK303-PROJECT.c: 205: digital = ADRESH*256 + ADRESL;
   913     0672  081E               	movf	30,w	;volatile
   914     0673  00E9               	movwf	??_main
   915     0674  01EA               	clrf	??_main+1
   916     0675  0869               	movf	??_main,w
   917     0676  00EA               	movwf	??_main+1
   918     0677  01E9               	clrf	??_main
   919     0678  1683               	bsf	3,5	;RP0=1, select bank1
   920     0679  081E               	movf	30,w	;volatile
   921     067A  1283               	bcf	3,5	;RP0=0, select bank0
   922     067B  0769               	addwf	??_main,w
   923     067C  00F8               	movwf	___awtoft@c
   924     067D  3000               	movlw	0
   925     067E  1803               	skipnc
   926     067F  3001               	movlw	1
   927     0680  076A               	addwf	??_main+1,w
   928     0681  00F9               	movwf	___awtoft@c+1
   929     0682  120A  158A  27C6  120A  118A  	fcall	___awtoft
   930     0687  0878               	movf	?___awtoft,w
   931     0688  1683               	bsf	3,5	;RP0=1, select bank1
   932     0689  00B9               	movwf	main@digital^(0+128)
   933     068A  0879               	movf	?___awtoft+1,w
   934     068B  00BA               	movwf	(main@digital+1)^(0+128)
   935     068C  087A               	movf	?___awtoft+2,w
   936     068D  00BB               	movwf	(main@digital+2)^(0+128)
   937                           
   938                           ;MEK303-PROJECT.c: 206: voltage = digital * voltage_coefficent;
   939     068E  082F               	movf	main@voltage_coefficent^(0+128),w
   940     068F  1283               	bcf	3,5	;RP0=0, select bank0
   941     0690  00AC               	movwf	___ftmul@f1
   942     0691  1683               	bsf	3,5	;RP0=1, select bank1
   943     0692  0830               	movf	(main@voltage_coefficent+1)^(0+128),w
   944     0693  1283               	bcf	3,5	;RP0=0, select bank0
   945     0694  00AD               	movwf	___ftmul@f1+1
   946     0695  1683               	bsf	3,5	;RP0=1, select bank1
   947     0696  0831               	movf	(main@voltage_coefficent+2)^(0+128),w
   948     0697  1283               	bcf	3,5	;RP0=0, select bank0
   949     0698  00AE               	movwf	___ftmul@f1+2
   950     0699  1683               	bsf	3,5	;RP0=1, select bank1
   951     069A  0839               	movf	main@digital^(0+128),w
   952     069B  1283               	bcf	3,5	;RP0=0, select bank0
   953     069C  00AF               	movwf	___ftmul@f2
   954     069D  1683               	bsf	3,5	;RP0=1, select bank1
   955     069E  083A               	movf	(main@digital+1)^(0+128),w
   956     069F  1283               	bcf	3,5	;RP0=0, select bank0
   957     06A0  00B0               	movwf	___ftmul@f2+1
   958     06A1  1683               	bsf	3,5	;RP0=1, select bank1
   959     06A2  083B               	movf	(main@digital+2)^(0+128),w
   960     06A3  1283               	bcf	3,5	;RP0=0, select bank0
   961     06A4  00B1               	movwf	___ftmul@f2+2
   962     06A5  120A  118A  23A5  120A  118A  	fcall	___ftmul
   963     06AA  082C               	movf	?___ftmul,w
   964     06AB  1683               	bsf	3,5	;RP0=1, select bank1
   965     06AC  00B2               	movwf	main@voltage^(0+128)
   966     06AD  1283               	bcf	3,5	;RP0=0, select bank0
   967     06AE  082D               	movf	?___ftmul+1,w
   968     06AF  1683               	bsf	3,5	;RP0=1, select bank1
   969     06B0  00B3               	movwf	(main@voltage+1)^(0+128)
   970     06B1  1283               	bcf	3,5	;RP0=0, select bank0
   971     06B2  082E               	movf	?___ftmul+2,w
   972     06B3  1683               	bsf	3,5	;RP0=1, select bank1
   973     06B4  00B4               	movwf	(main@voltage+2)^(0+128)
   974                           
   975                           ;MEK303-PROJECT.c: 210: Lcd_Set_Cursor(1,5);
   976     06B5  3005               	movlw	5
   977     06B6  00F4               	movwf	Lcd_Set_Cursor@b
   978     06B7  3001               	movlw	1
   979     06B8  120A  118A  2123  120A  118A  	fcall	_Lcd_Set_Cursor
   980                           
   981                           ;MEK303-PROJECT.c: 211: speed = map(voltage,0,4.9,0,100);
   982     06BD  1683               	bsf	3,5	;RP0=1, select bank1
   983     06BE  0832               	movf	main@voltage^(0+128),w
   984     06BF  1283               	bcf	3,5	;RP0=0, select bank0
   985     06C0  00D7               	movwf	map@x
   986     06C1  1683               	bsf	3,5	;RP0=1, select bank1
   987     06C2  0833               	movf	(main@voltage+1)^(0+128),w
   988     06C3  1283               	bcf	3,5	;RP0=0, select bank0
   989     06C4  00D8               	movwf	map@x+1
   990     06C5  1683               	bsf	3,5	;RP0=1, select bank1
   991     06C6  0834               	movf	(main@voltage+2)^(0+128),w
   992     06C7  1283               	bcf	3,5	;RP0=0, select bank0
   993     06C8  00D9               	movwf	map@x+2
   994     06C9  3000               	movlw	0
   995     06CA  00DA               	movwf	map@in_min
   996     06CB  3000               	movlw	0
   997     06CC  00DB               	movwf	map@in_min+1
   998     06CD  3000               	movlw	0
   999     06CE  00DC               	movwf	map@in_min+2
  1000     06CF  30CD               	movlw	205
  1001     06D0  00DD               	movwf	map@in_max
  1002     06D1  309C               	movlw	156
  1003     06D2  00DE               	movwf	map@in_max+1
  1004     06D3  3040               	movlw	64
  1005     06D4  00DF               	movwf	map@in_max+2
  1006     06D5  3000               	movlw	0
  1007     06D6  00E0               	movwf	map@out_min
  1008     06D7  3000               	movlw	0
  1009     06D8  00E1               	movwf	map@out_min+1
  1010     06D9  3000               	movlw	0
  1011     06DA  00E2               	movwf	map@out_min+2
  1012     06DB  3000               	movlw	0
  1013     06DC  00E3               	movwf	map@out_max
  1014     06DD  30C8               	movlw	200
  1015     06DE  00E4               	movwf	map@out_max+1
  1016     06DF  3042               	movlw	66
  1017     06E0  00E5               	movwf	map@out_max+2
  1018     06E1  120A  118A  229F  120A  118A  	fcall	_map
  1019     06E6  0858               	movf	?_map+1,w
  1020     06E7  1683               	bsf	3,5	;RP0=1, select bank1
  1021     06E8  00BD               	movwf	(main@speed+1)^(0+128)
  1022     06E9  1283               	bcf	3,5	;RP0=0, select bank0
  1023     06EA  0857               	movf	?_map,w
  1024     06EB  1683               	bsf	3,5	;RP0=1, select bank1
  1025     06EC  00BC               	movwf	main@speed^(0+128)
  1026                           
  1027                           ;MEK303-PROJECT.c: 212: if (speed < 1)
  1028     06ED  083D               	movf	(main@speed+1)^(0+128),w
  1029     06EE  3A80               	xorlw	128
  1030     06EF  00FF               	movwf	127
  1031     06F0  3080               	movlw	128
  1032     06F1  027F               	subwf	127,w
  1033     06F2  1D03               	skipz
  1034     06F3  2EF6               	goto	u2135
  1035     06F4  3001               	movlw	1
  1036     06F5  023C               	subwf	main@speed^(0+128),w
  1037     06F6                     u2135:
  1038     06F6  1803               	skipnc
  1039     06F7  2F02               	goto	l1832
  1040                           
  1041                           ;MEK303-PROJECT.c: 213: {;MEK303-PROJECT.c: 214: speed=0;
  1042     06F8  1683               	bsf	3,5	;RP0=1, select bank1
  1043     06F9  1303               	bcf	3,6	;RP1=0, select bank1
  1044     06FA  01BC               	clrf	main@speed^(0+128)
  1045     06FB  01BD               	clrf	(main@speed+1)^(0+128)
  1046                           
  1047                           ;MEK303-PROJECT.c: 215: digital=0;
  1048     06FC  3000               	movlw	0
  1049     06FD  00B9               	movwf	main@digital^(0+128)
  1050     06FE  3000               	movlw	0
  1051     06FF  00BA               	movwf	(main@digital+1)^(0+128)
  1052     0700  3000               	movlw	0
  1053     0701  00BB               	movwf	(main@digital+2)^(0+128)
  1054     0702                     l1832:
  1055                           
  1056                           ;MEK303-PROJECT.c: 216: };MEK303-PROJECT.c: 217: sprintf(char_digital,"%d",speed);
  1057     0702  3035               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1058     0703  1283               	bcf	3,5	;RP0=0, select bank0
  1059     0704  1303               	bcf	3,6	;RP1=0, select bank0
  1060     0705  00A0               	movwf	sprintf@f
  1061     0706  1683               	bsf	3,5	;RP0=1, select bank1
  1062     0707  083D               	movf	(main@speed+1)^(0+128),w
  1063     0708  1283               	bcf	3,5	;RP0=0, select bank0
  1064     0709  00A2               	movwf	?_sprintf+2
  1065     070A  1683               	bsf	3,5	;RP0=1, select bank1
  1066     070B  083C               	movf	main@speed^(0+128),w
  1067     070C  1283               	bcf	3,5	;RP0=0, select bank0
  1068     070D  00A1               	movwf	?_sprintf+1
  1069     070E  30A0               	movlw	(low (main@char_digital| 0))& (0+255)
  1070     070F  120A  118A  244A  120A  118A  	fcall	_sprintf
  1071                           
  1072                           ;MEK303-PROJECT.c: 218: Lcd_Write_String("HIZ: %");
  1073     0714  302E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1074     0715  00F5               	movwf	Lcd_Write_String@a
  1075     0716  3080               	movlw	128
  1076     0717  00F6               	movwf	Lcd_Write_String@a+1
  1077     0718  120A  118A  20E6  120A  118A  	fcall	_Lcd_Write_String
  1078                           
  1079                           ;MEK303-PROJECT.c: 219: Lcd_Write_String(char_digital);
  1080     071D  30A0               	movlw	(low (main@char_digital| 0))& (0+255)
  1081     071E  00F5               	movwf	Lcd_Write_String@a
  1082     071F  3000               	movlw	0
  1083     0720  00F6               	movwf	Lcd_Write_String@a+1
  1084     0721  120A  118A  20E6  120A  118A  	fcall	_Lcd_Write_String
  1085                           
  1086                           ;MEK303-PROJECT.c: 226: CCP1CON=0B00001111;
  1087     0726  300F               	movlw	15
  1088     0727  0097               	movwf	23	;volatile
  1089                           
  1090                           ;MEK303-PROJECT.c: 227: T2CON = 0B00000101;
  1091     0728  3005               	movlw	5
  1092     0729  0092               	movwf	18	;volatile
  1093                           
  1094                           ;MEK303-PROJECT.c: 228: TMR2=0;
  1095     072A  0191               	clrf	17	;volatile
  1096                           
  1097                           ;MEK303-PROJECT.c: 229: PR2=255;
  1098     072B  30FF               	movlw	255
  1099     072C  1683               	bsf	3,5	;RP0=1, select bank1
  1100     072D  0092               	movwf	18	;volatile
  1101                           
  1102                           ;MEK303-PROJECT.c: 232: if (PORTBbits.RB6 == 1)
  1103     072E  1283               	bcf	3,5	;RP0=0, select bank0
  1104     072F  1F06               	btfss	6,6	;volatile
  1105     0730  2F35               	goto	l108
  1106     0731                     l109:
  1107     0731  1B06               	btfsc	6,6	;volatile
  1108     0732  2F31               	goto	l109
  1109                           
  1110                           ;MEK303-PROJECT.c: 235: rotate = 1;
  1111     0733  3001               	movlw	1
  1112     0734  2F3A               	goto	L1
  1113     0735                     l108:	
  1114                           ;MEK303-PROJECT.c: 236: }
  1115                           
  1116                           
  1117                           ;MEK303-PROJECT.c: 237: else if (PORTBbits.RB7 == 1)
  1118     0735  1F86               	btfss	6,7	;volatile
  1119     0736  2F3E               	goto	l1858
  1120     0737                     l114:
  1121     0737  1B86               	btfsc	6,7	;volatile
  1122     0738  2F37               	goto	l114
  1123                           
  1124                           ;MEK303-PROJECT.c: 240: rotate = 2;
  1125     0739  3002               	movlw	2
  1126     073A                     L1:
  1127     073A  1683               	bsf	3,5	;RP0=1, select bank1
  1128     073B  00B7               	movwf	main@rotate^(0+128)
  1129     073C  3000               	movlw	0
  1130     073D  00B8               	movwf	(main@rotate^(0+128)+1)
  1131     073E                     l1858:
  1132                           
  1133                           ;MEK303-PROJECT.c: 241: };MEK303-PROJECT.c: 244: if (speed > 0)
  1134     073E  1683               	bsf	3,5	;RP0=1, select bank1
  1135     073F  083D               	movf	(main@speed+1)^(0+128),w
  1136     0740  3A80               	xorlw	128
  1137     0741  00FF               	movwf	127
  1138     0742  3080               	movlw	128
  1139     0743  027F               	subwf	127,w
  1140     0744  1D03               	skipz
  1141     0745  2F48               	goto	u2185
  1142     0746  3001               	movlw	1
  1143     0747  023C               	subwf	main@speed^(0+128),w
  1144     0748                     u2185:
  1145     0748  1C03               	skipc
  1146     0749  2FB7               	goto	l1880
  1147                           
  1148                           ;MEK303-PROJECT.c: 245: {;MEK303-PROJECT.c: 247: if (rotate == 1)
  1149     074A  1683               	bsf	3,5	;RP0=1, select bank1
  1150     074B  1303               	bcf	3,6	;RP1=0, select bank1
  1151     074C  0337               	decf	main@rotate^(0+128),w
  1152     074D  0438               	iorwf	(main@rotate+1)^(0+128),w
  1153     074E  1D03               	btfss	3,2
  1154     074F  2F80               	goto	l1870
  1155                           
  1156                           ;MEK303-PROJECT.c: 248: {;MEK303-PROJECT.c: 249: PORTCbits.RC3 = 1;
  1157     0750  1283               	bcf	3,5	;RP0=0, select bank0
  1158     0751  1587               	bsf	7,3	;volatile
  1159                           
  1160                           ;MEK303-PROJECT.c: 250: PORTCbits.RC5 = 1;
  1161     0752  1687               	bsf	7,5	;volatile
  1162                           
  1163                           ;MEK303-PROJECT.c: 251: PORTCbits.RC4 = 0;
  1164     0753  1207               	bcf	7,4	;volatile
  1165                           
  1166                           ;MEK303-PROJECT.c: 252: PORTCbits.RC6 = 0;
  1167     0754  1307               	bcf	7,6	;volatile
  1168                           
  1169                           ;MEK303-PROJECT.c: 253: duty_send(digital);
  1170     0755  1683               	bsf	3,5	;RP0=1, select bank1
  1171     0756  0839               	movf	main@digital^(0+128),w
  1172     0757  1283               	bcf	3,5	;RP0=0, select bank0
  1173     0758  00CA               	movwf	___fttol@f1
  1174     0759  1683               	bsf	3,5	;RP0=1, select bank1
  1175     075A  083A               	movf	(main@digital+1)^(0+128),w
  1176     075B  1283               	bcf	3,5	;RP0=0, select bank0
  1177     075C  00CB               	movwf	___fttol@f1+1
  1178     075D  1683               	bsf	3,5	;RP0=1, select bank1
  1179     075E  083B               	movf	(main@digital+2)^(0+128),w
  1180     075F  1283               	bcf	3,5	;RP0=0, select bank0
  1181     0760  00CC               	movwf	___fttol@f1+2
  1182     0761  120A  118A  2228  120A  118A  	fcall	___fttol
  1183     0766  084B               	movf	?___fttol+1,w
  1184     0767  00D8               	movwf	duty_send@deger+1
  1185     0768  084A               	movf	?___fttol,w
  1186     0769  00D7               	movwf	duty_send@deger
  1187     076A  120A  158A  2797  120A  118A  	fcall	_duty_send
  1188                           
  1189                           ;MEK303-PROJECT.c: 254: Lcd_Set_Cursor(2,5);
  1190     076F  3005               	movlw	5
  1191     0770  00F4               	movwf	Lcd_Set_Cursor@b
  1192     0771  3002               	movlw	2
  1193     0772  120A  118A  2123  120A  118A  	fcall	_Lcd_Set_Cursor
  1194                           
  1195                           ;MEK303-PROJECT.c: 255: Lcd_Write_String("YON: ---");
  1196     0777  3025               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1197     0778  00F5               	movwf	Lcd_Write_String@a
  1198     0779  3080               	movlw	128
  1199     077A  00F6               	movwf	Lcd_Write_String@a+1
  1200     077B  120A  118A  20E6  120A  118A  	fcall	_Lcd_Write_String
  1201     0780                     l1870:
  1202                           
  1203                           ;MEK303-PROJECT.c: 256: };MEK303-PROJECT.c: 258: if (rotate == 2)
  1204     0780  3002               	movlw	2
  1205     0781  1683               	bsf	3,5	;RP0=1, select bank1
  1206     0782  0637               	xorwf	main@rotate^(0+128),w
  1207     0783  0438               	iorwf	(main@rotate+1)^(0+128),w
  1208     0784  1D03               	btfss	3,2
  1209     0785  2E2A               	goto	l1798
  1210                           
  1211                           ;MEK303-PROJECT.c: 259: {;MEK303-PROJECT.c: 260: PORTCbits.RC3 = 0;
  1212     0786  1283               	bcf	3,5	;RP0=0, select bank0
  1213     0787  1187               	bcf	7,3	;volatile
  1214                           
  1215                           ;MEK303-PROJECT.c: 261: PORTCbits.RC5 = 0;
  1216     0788  1287               	bcf	7,5	;volatile
  1217                           
  1218                           ;MEK303-PROJECT.c: 262: PORTCbits.RC4 = 1;
  1219     0789  1607               	bsf	7,4	;volatile
  1220                           
  1221                           ;MEK303-PROJECT.c: 263: PORTCbits.RC6 = 1;
  1222     078A  1707               	bsf	7,6	;volatile
  1223                           
  1224                           ;MEK303-PROJECT.c: 264: duty_send(digital);
  1225     078B  1683               	bsf	3,5	;RP0=1, select bank1
  1226     078C  0839               	movf	main@digital^(0+128),w
  1227     078D  1283               	bcf	3,5	;RP0=0, select bank0
  1228     078E  00CA               	movwf	___fttol@f1
  1229     078F  1683               	bsf	3,5	;RP0=1, select bank1
  1230     0790  083A               	movf	(main@digital+1)^(0+128),w
  1231     0791  1283               	bcf	3,5	;RP0=0, select bank0
  1232     0792  00CB               	movwf	___fttol@f1+1
  1233     0793  1683               	bsf	3,5	;RP0=1, select bank1
  1234     0794  083B               	movf	(main@digital+2)^(0+128),w
  1235     0795  1283               	bcf	3,5	;RP0=0, select bank0
  1236     0796  00CC               	movwf	___fttol@f1+2
  1237     0797  120A  118A  2228  120A  118A  	fcall	___fttol
  1238     079C  084B               	movf	?___fttol+1,w
  1239     079D  00D8               	movwf	duty_send@deger+1
  1240     079E  084A               	movf	?___fttol,w
  1241     079F  00D7               	movwf	duty_send@deger
  1242     07A0  120A  158A  2797  120A  118A  	fcall	_duty_send
  1243                           
  1244                           ;MEK303-PROJECT.c: 265: Lcd_Set_Cursor(2,5);
  1245     07A5  3005               	movlw	5
  1246     07A6  00F4               	movwf	Lcd_Set_Cursor@b
  1247     07A7  3002               	movlw	2
  1248     07A8  120A  118A  2123  120A  118A  	fcall	_Lcd_Set_Cursor
  1249                           
  1250                           ;MEK303-PROJECT.c: 266: Lcd_Write_String("YON: ---");
  1251     07AD  3025               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1252     07AE  00F5               	movwf	Lcd_Write_String@a
  1253     07AF  3080               	movlw	128
  1254     07B0  00F6               	movwf	Lcd_Write_String@a+1
  1255     07B1  120A  118A  20E6  120A  118A  	fcall	_Lcd_Write_String
  1256     07B6  2E2A               	goto	l1798
  1257     07B7                     l1880:
  1258                           
  1259                           ;MEK303-PROJECT.c: 269: else;MEK303-PROJECT.c: 270: {;MEK303-PROJECT.c: 271: Lcd_Clear()
      +                          ;
  1260     07B7  120A  158A  2776  120A  118A  	fcall	_Lcd_Clear
  1261                           
  1262                           ;MEK303-PROJECT.c: 272: PORTCbits.RC3 = 0;
  1263     07BC  1187               	bcf	7,3	;volatile
  1264                           
  1265                           ;MEK303-PROJECT.c: 273: PORTCbits.RC5 = 0;
  1266     07BD  1287               	bcf	7,5	;volatile
  1267                           
  1268                           ;MEK303-PROJECT.c: 274: PORTCbits.RC4 = 0;
  1269     07BE  1207               	bcf	7,4	;volatile
  1270                           
  1271                           ;MEK303-PROJECT.c: 275: PORTCbits.RC6 = 0;
  1272     07BF  1307               	bcf	7,6	;volatile
  1273                           
  1274                           ;MEK303-PROJECT.c: 276: sprintf(char_digital,"%d",speed);
  1275     07C0  3035               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1276     07C1  00A0               	movwf	sprintf@f
  1277     07C2  1683               	bsf	3,5	;RP0=1, select bank1
  1278     07C3  083D               	movf	(main@speed+1)^(0+128),w
  1279     07C4  1283               	bcf	3,5	;RP0=0, select bank0
  1280     07C5  00A2               	movwf	?_sprintf+2
  1281     07C6  1683               	bsf	3,5	;RP0=1, select bank1
  1282     07C7  083C               	movf	main@speed^(0+128),w
  1283     07C8  1283               	bcf	3,5	;RP0=0, select bank0
  1284     07C9  00A1               	movwf	?_sprintf+1
  1285     07CA  30A0               	movlw	(low (main@char_digital| 0))& (0+255)
  1286     07CB  120A  118A  244A  120A  118A  	fcall	_sprintf
  1287                           
  1288                           ;MEK303-PROJECT.c: 277: Lcd_Set_Cursor(1,5);
  1289     07D0  3005               	movlw	5
  1290     07D1  00F4               	movwf	Lcd_Set_Cursor@b
  1291     07D2  3001               	movlw	1
  1292     07D3  120A  118A  2123  120A  118A  	fcall	_Lcd_Set_Cursor
  1293                           
  1294                           ;MEK303-PROJECT.c: 278: Lcd_Write_String("HIZ: %");
  1295     07D8  302E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1296     07D9  00F5               	movwf	Lcd_Write_String@a
  1297     07DA  3080               	movlw	128
  1298     07DB  00F6               	movwf	Lcd_Write_String@a+1
  1299     07DC  120A  118A  20E6  120A  118A  	fcall	_Lcd_Write_String
  1300                           
  1301                           ;MEK303-PROJECT.c: 279: Lcd_Write_String(char_digital);
  1302     07E1  30A0               	movlw	(low (main@char_digital| 0))& (0+255)
  1303     07E2  00F5               	movwf	Lcd_Write_String@a
  1304     07E3  3000               	movlw	0
  1305     07E4  00F6               	movwf	Lcd_Write_String@a+1
  1306     07E5  120A  118A  20E6  120A  118A  	fcall	_Lcd_Write_String
  1307                           
  1308                           ;MEK303-PROJECT.c: 280: Lcd_Set_Cursor(2,5);
  1309     07EA  3005               	movlw	5
  1310     07EB  00F4               	movwf	Lcd_Set_Cursor@b
  1311     07EC  3002               	movlw	2
  1312     07ED  120A  118A  2123  120A  118A  	fcall	_Lcd_Set_Cursor
  1313                           
  1314                           ;MEK303-PROJECT.c: 281: Lcd_Write_String("YON: ---");
  1315     07F2  3025               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1316     07F3  00F5               	movwf	Lcd_Write_String@a
  1317     07F4  3080               	movlw	128
  1318     07F5  00F6               	movwf	Lcd_Write_String@a+1
  1319     07F6  120A  118A  20E6  120A  118A  	fcall	_Lcd_Write_String
  1320     07FB  2E2A               	goto	l1798
  1321     07FC                     __end_of_main:
  1322                           
  1323                           	psect	text1
  1324     044A                     __ptext1:	
  1325 ;; *************** function _sprintf *****************
  1326 ;; Defined at:
  1327 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\doprnt.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;  sp              1    wreg     PTR unsigned char 
  1330 ;;		 -> main@char_digital(15), 
  1331 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1332 ;;		 -> STR_7(3), STR_3(3), 
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1335 ;;		 -> main@char_digital(15), 
  1336 ;;  tmpval          4    0        struct .
  1337 ;;  val             2    9[BANK0 ] unsigned int 
  1338 ;;  cp              2    0        PTR const unsigned char 
  1339 ;;  len             2    0        unsigned int 
  1340 ;;  c               1   12[BANK0 ] unsigned char 
  1341 ;;  prec            1    8[BANK0 ] char 
  1342 ;;  flag            1    7[BANK0 ] unsigned char 
  1343 ;;  ap              1    6[BANK0 ] PTR void [1]
  1344 ;;		 -> ?_sprintf(2), 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  2    0[BANK0 ] int 
  1347 ;; Registers used:
  1348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 300/0
  1351 ;;		On exit  : B00/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1354 ;;      Params:         0       3       0       0       0
  1355 ;;      Locals:         0       7       0       0       0
  1356 ;;      Temps:          0       3       0       0       0
  1357 ;;      Totals:         0      13       0       0       0
  1358 ;;Total ram usage:       13 bytes
  1359 ;; Hardware stack levels used: 1
  1360 ;; Hardware stack levels required when called: 1
  1361 ;; This function calls:
  1362 ;;		___lwdiv
  1363 ;;		___lwmod
  1364 ;; This function is called by:
  1365 ;;		_main
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369     044A                     _sprintf:	
  1370                           ;psect for function _sprintf
  1371                           
  1372                           
  1373                           ;incstack = 0
  1374                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1375                           ;sprintf@sp stored from wreg
  1376     044A  00AB               	movwf	sprintf@sp
  1377                           
  1378                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
  1379     044B  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1380     044C  00A6               	movwf	sprintf@ap
  1381     044D                     l1744:	
  1382                           ;doprnt.c: 553: while((c = *f++)) {
  1383                           
  1384     044D  3001               	movlw	1
  1385     044E  07A0               	addwf	sprintf@f,f
  1386     044F  30FF               	movlw	-1
  1387     0450  0720               	addwf	sprintf@f,w
  1388     0451  0084               	movwf	4
  1389     0452  120A  118A  200D  120A  118A  	fcall	stringdir
  1390     0457  00AC               	movwf	sprintf@c
  1391     0458  082C               	movf	sprintf@c,w
  1392     0459  1903               	btfsc	3,2
  1393     045A  2D03               	goto	l1746
  1394                           
  1395                           ;doprnt.c: 555: if(c != '%')
  1396     045B  3025               	movlw	37
  1397     045C  062C               	xorwf	sprintf@c,w
  1398     045D  1903               	btfsc	3,2
  1399     045E  2C69               	goto	l1698
  1400                           
  1401                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  1402     045F  082B               	movf	sprintf@sp,w
  1403     0460  0084               	movwf	4
  1404     0461  082C               	movf	sprintf@c,w
  1405     0462  1383               	bcf	3,7	;select IRP bank0
  1406     0463  0080               	movwf	0
  1407     0464  3001               	movlw	1
  1408     0465  00FF               	movwf	127
  1409     0466  087F               	movf	127,w
  1410     0467  07AB               	addwf	sprintf@sp,f
  1411                           
  1412                           ;doprnt.c: 559: continue;
  1413     0468  2C4D               	goto	l1744
  1414     0469                     l1698:
  1415                           
  1416                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  1417     0469  01A7               	clrf	sprintf@flag
  1418                           
  1419                           ;doprnt.c: 661: switch(c = *f++) {
  1420     046A  3001               	movlw	1
  1421     046B  07A0               	addwf	sprintf@f,f
  1422     046C  30FF               	movlw	-1
  1423     046D  0720               	addwf	sprintf@f,w
  1424     046E  0084               	movwf	4
  1425     046F  120A  118A  200D  120A  118A  	fcall	stringdir
  1426     0474  00AC               	movwf	sprintf@c
  1427                           
  1428                           ; Switch size 1, requested type "simple"
  1429                           ; Number of cases is 3, Range of values is 0 to 105
  1430                           ; switch strategies available:
  1431                           ; Name         Instructions Cycles
  1432                           ; simple_byte           10     6 (average)
  1433                           ; jumptable            260     6 (fixed)
  1434                           ;	Chosen strategy is simple_byte
  1435     0475  3A00               	xorlw	0	; case 0
  1436     0476  1903               	skipnz
  1437     0477  2D03               	goto	l1746
  1438     0478  3A64               	xorlw	100	; case 100
  1439     0479  1903               	skipnz
  1440     047A  2C7F               	goto	l1704
  1441     047B  3A0D               	xorlw	13	; case 105
  1442     047C  1903               	skipnz
  1443     047D  2C7F               	goto	l1704
  1444     047E  2C4D               	goto	l1744
  1445     047F                     l1704:
  1446                           
  1447                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
  1448     047F  0826               	movf	sprintf@ap,w
  1449     0480  0084               	movwf	4
  1450     0481  1383               	bcf	3,7	;select IRP bank0
  1451     0482  0800               	movf	0,w
  1452     0483  00A9               	movwf	sprintf@val
  1453     0484  0A84               	incf	4,f
  1454     0485  0800               	movf	0,w
  1455     0486  00AA               	movwf	sprintf@val+1
  1456     0487  3002               	movlw	2
  1457     0488  00FF               	movwf	127
  1458     0489  087F               	movf	127,w
  1459     048A  07A6               	addwf	sprintf@ap,f
  1460                           
  1461                           ;doprnt.c: 1287: if((int)val < 0) {
  1462     048B  1FAA               	btfss	sprintf@val+1,7
  1463     048C  2C96               	goto	l1714
  1464                           
  1465                           ;doprnt.c: 1288: flag |= 0x03;
  1466     048D  3003               	movlw	3
  1467     048E  00FF               	movwf	127
  1468     048F  087F               	movf	127,w
  1469     0490  04A7               	iorwf	sprintf@flag,f
  1470                           
  1471                           ;doprnt.c: 1289: val = -val;
  1472     0491  09A9               	comf	sprintf@val,f
  1473     0492  09AA               	comf	sprintf@val+1,f
  1474     0493  0AA9               	incf	sprintf@val,f
  1475     0494  1903               	skipnz
  1476     0495  0AAA               	incf	sprintf@val+1,f
  1477     0496                     l1714:
  1478                           
  1479                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  1480     0496  01AC               	clrf	sprintf@c
  1481     0497  0AAC               	incf	sprintf@c,f
  1482     0498                     l1720:
  1483                           
  1484                           ;doprnt.c: 1332: if(val < dpowers[c])
  1485     0498  082C               	movf	sprintf@c,w
  1486     0499  00A3               	movwf	??_sprintf
  1487     049A  0723               	addwf	??_sprintf,w
  1488     049B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1489     049C  0084               	movwf	4
  1490     049D  120A  118A  200D  120A  118A  	fcall	stringdir
  1491     04A2  00A4               	movwf	??_sprintf+1
  1492     04A3  120A  118A  200D  120A  118A  	fcall	stringdir
  1493     04A8  00A5               	movwf	??_sprintf+2
  1494     04A9  0825               	movf	??_sprintf+2,w
  1495     04AA  022A               	subwf	sprintf@val+1,w
  1496     04AB  1D03               	skipz
  1497     04AC  2CAF               	goto	u2055
  1498     04AD  0824               	movf	??_sprintf+1,w
  1499     04AE  0229               	subwf	sprintf@val,w
  1500     04AF                     u2055:
  1501     04AF  1C03               	btfss	3,0
  1502     04B0  2CB9               	goto	l1728
  1503     04B1  3001               	movlw	1
  1504     04B2  00FF               	movwf	127
  1505     04B3  087F               	movf	127,w
  1506     04B4  07AC               	addwf	sprintf@c,f
  1507     04B5  3005               	movlw	5
  1508     04B6  062C               	xorwf	sprintf@c,w
  1509     04B7  1D03               	btfss	3,2
  1510     04B8  2C98               	goto	l1720
  1511     04B9                     l1728:
  1512                           
  1513                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  1514     04B9  0827               	movf	sprintf@flag,w
  1515     04BA  3903               	andlw	3
  1516     04BB  1903               	btfsc	3,2
  1517     04BC  2CC6               	goto	l1734
  1518                           
  1519                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  1520     04BD  082B               	movf	sprintf@sp,w
  1521     04BE  0084               	movwf	4
  1522     04BF  302D               	movlw	45
  1523     04C0  1383               	bcf	3,7	;select IRP bank0
  1524     04C1  0080               	movwf	0
  1525     04C2  3001               	movlw	1
  1526     04C3  00FF               	movwf	127
  1527     04C4  087F               	movf	127,w
  1528     04C5  07AB               	addwf	sprintf@sp,f
  1529     04C6                     l1734:
  1530                           
  1531                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  1532     04C6  082C               	movf	sprintf@c,w
  1533     04C7  00A8               	movwf	sprintf@prec
  1534     04C8                     l1742:	
  1535                           ;doprnt.c: 1500: while(prec--) {
  1536                           
  1537     04C8  30FF               	movlw	255
  1538     04C9  00FF               	movwf	127
  1539     04CA  087F               	movf	127,w
  1540     04CB  07A8               	addwf	sprintf@prec,f
  1541     04CC  0A28               	incf	sprintf@prec,w
  1542     04CD  1903               	btfsc	3,2
  1543     04CE  2C4D               	goto	l1744
  1544                           
  1545                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  1546     04CF  300A               	movlw	10
  1547     04D0  00F7               	movwf	___lwmod@divisor
  1548     04D1  3000               	movlw	0
  1549     04D2  00F8               	movwf	___lwmod@divisor+1
  1550     04D3  0828               	movf	sprintf@prec,w
  1551     04D4  00A3               	movwf	??_sprintf
  1552     04D5  0723               	addwf	??_sprintf,w
  1553     04D6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1554     04D7  0084               	movwf	4
  1555     04D8  120A  118A  200D  120A  118A  	fcall	stringdir
  1556     04DD  00F0               	movwf	___lwdiv@divisor
  1557     04DE  120A  118A  200D  120A  118A  	fcall	stringdir
  1558     04E3  00F1               	movwf	___lwdiv@divisor+1
  1559     04E4  082A               	movf	sprintf@val+1,w
  1560     04E5  00F3               	movwf	___lwdiv@dividend+1
  1561     04E6  0829               	movf	sprintf@val,w
  1562     04E7  00F2               	movwf	___lwdiv@dividend
  1563     04E8  120A  118A  20AA  120A  118A  	fcall	___lwdiv
  1564     04ED  0871               	movf	?___lwdiv+1,w
  1565     04EE  00FA               	movwf	___lwmod@dividend+1
  1566     04EF  0870               	movf	?___lwdiv,w
  1567     04F0  00F9               	movwf	___lwmod@dividend
  1568     04F1  120A  118A  2078  120A  118A  	fcall	___lwmod
  1569     04F6  0877               	movf	?___lwmod,w
  1570     04F7  3E30               	addlw	48
  1571     04F8  00AC               	movwf	sprintf@c
  1572                           
  1573                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  1574     04F9  082B               	movf	sprintf@sp,w
  1575     04FA  0084               	movwf	4
  1576     04FB  082C               	movf	sprintf@c,w
  1577     04FC  1383               	bcf	3,7	;select IRP bank0
  1578     04FD  0080               	movwf	0
  1579     04FE  3001               	movlw	1
  1580     04FF  00FF               	movwf	127
  1581     0500  087F               	movf	127,w
  1582     0501  07AB               	addwf	sprintf@sp,f
  1583     0502  2CC8               	goto	l1742
  1584     0503                     l1746:
  1585                           
  1586                           ;doprnt.c: 1564: *sp = 0;
  1587     0503  082B               	movf	sprintf@sp,w
  1588     0504  0084               	movwf	4
  1589     0505  1383               	bcf	3,7	;select IRP bank0
  1590     0506  0180               	clrf	0
  1591     0507  0008               	return
  1592     0508                     __end_of_sprintf:
  1593                           
  1594                           	psect	text2
  1595     0078                     __ptext2:	
  1596 ;; *************** function ___lwmod *****************
  1597 ;; Defined at:
  1598 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\lwmod.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  divisor         2    7[COMMON] unsigned int 
  1601 ;;  dividend        2    9[COMMON] unsigned int 
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;  counter         1   11[COMMON] unsigned char 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  2    7[COMMON] unsigned int 
  1606 ;; Registers used:
  1607 ;;		wreg, status,2, status,0, btemp+1
  1608 ;; Tracked objects:
  1609 ;;		On entry : 300/0
  1610 ;;		On exit  : 300/0
  1611 ;;		Unchanged: 300/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1613 ;;      Params:         4       0       0       0       0
  1614 ;;      Locals:         1       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0
  1616 ;;      Totals:         5       0       0       0       0
  1617 ;;Total ram usage:        5 bytes
  1618 ;; Hardware stack levels used: 1
  1619 ;; This function calls:
  1620 ;;		Nothing
  1621 ;; This function is called by:
  1622 ;;		_sprintf
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626     0078                     ___lwmod:	
  1627                           ;psect for function ___lwmod
  1628                           
  1629                           
  1630                           ;incstack = 0
  1631                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1632     0078  0877               	movf	___lwmod@divisor,w
  1633     0079  0478               	iorwf	___lwmod@divisor+1,w
  1634     007A  1903               	btfsc	3,2
  1635     007B  28A5               	goto	l1638
  1636     007C  01FB               	clrf	___lwmod@counter
  1637     007D  0AFB               	incf	___lwmod@counter,f
  1638     007E                     l1628:
  1639     007E  1BF8               	btfsc	___lwmod@divisor+1,7
  1640     007F  288C               	goto	l1630
  1641     0080  3001               	movlw	1
  1642     0081                     u1895:
  1643     0081  1003               	clrc
  1644     0082  0DF7               	rlf	___lwmod@divisor,f
  1645     0083  0DF8               	rlf	___lwmod@divisor+1,f
  1646     0084  3EFF               	addlw	-1
  1647     0085  1D03               	skipz
  1648     0086  2881               	goto	u1895
  1649     0087  3001               	movlw	1
  1650     0088  00FF               	movwf	127
  1651     0089  087F               	movf	127,w
  1652     008A  07FB               	addwf	___lwmod@counter,f
  1653     008B  287E               	goto	l1628
  1654     008C                     l1630:
  1655     008C  0878               	movf	___lwmod@divisor+1,w
  1656     008D  027A               	subwf	___lwmod@dividend+1,w
  1657     008E  1D03               	skipz
  1658     008F  2892               	goto	u1915
  1659     0090  0877               	movf	___lwmod@divisor,w
  1660     0091  0279               	subwf	___lwmod@dividend,w
  1661     0092                     u1915:
  1662     0092  1C03               	skipc
  1663     0093  289A               	goto	l1634
  1664     0094  0877               	movf	___lwmod@divisor,w
  1665     0095  02F9               	subwf	___lwmod@dividend,f
  1666     0096  0878               	movf	___lwmod@divisor+1,w
  1667     0097  1C03               	skipc
  1668     0098  03FA               	decf	___lwmod@dividend+1,f
  1669     0099  02FA               	subwf	___lwmod@dividend+1,f
  1670     009A                     l1634:
  1671     009A  3001               	movlw	1
  1672     009B                     u1925:
  1673     009B  1003               	clrc
  1674     009C  0CF8               	rrf	___lwmod@divisor+1,f
  1675     009D  0CF7               	rrf	___lwmod@divisor,f
  1676     009E  3EFF               	addlw	-1
  1677     009F  1D03               	skipz
  1678     00A0  289B               	goto	u1925
  1679     00A1  3001               	movlw	1
  1680     00A2  02FB               	subwf	___lwmod@counter,f
  1681     00A3  1D03               	btfss	3,2
  1682     00A4  288C               	goto	l1630
  1683     00A5                     l1638:
  1684     00A5  087A               	movf	___lwmod@dividend+1,w
  1685     00A6  00F8               	movwf	?___lwmod+1
  1686     00A7  0879               	movf	___lwmod@dividend,w
  1687     00A8  00F7               	movwf	?___lwmod
  1688     00A9  0008               	return
  1689     00AA                     __end_of___lwmod:
  1690                           
  1691                           	psect	text3
  1692     00AA                     __ptext3:	
  1693 ;; *************** function ___lwdiv *****************
  1694 ;; Defined at:
  1695 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\lwdiv.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  divisor         2    0[COMMON] unsigned int 
  1698 ;;  dividend        2    2[COMMON] unsigned int 
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  quotient        2    4[COMMON] unsigned int 
  1701 ;;  counter         1    6[COMMON] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  2    0[COMMON] unsigned int 
  1704 ;; Registers used:
  1705 ;;		wreg, status,2, status,0, btemp+1
  1706 ;; Tracked objects:
  1707 ;;		On entry : 300/0
  1708 ;;		On exit  : 300/0
  1709 ;;		Unchanged: 300/0
  1710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1711 ;;      Params:         4       0       0       0       0
  1712 ;;      Locals:         3       0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0
  1714 ;;      Totals:         7       0       0       0       0
  1715 ;;Total ram usage:        7 bytes
  1716 ;; Hardware stack levels used: 1
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_sprintf
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724     00AA                     ___lwdiv:	
  1725                           ;psect for function ___lwdiv
  1726                           
  1727                           
  1728                           ;incstack = 0
  1729                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1730     00AA  01F4               	clrf	___lwdiv@quotient
  1731     00AB  01F5               	clrf	___lwdiv@quotient+1
  1732     00AC  0870               	movf	___lwdiv@divisor,w
  1733     00AD  0471               	iorwf	___lwdiv@divisor+1,w
  1734     00AE  1903               	btfsc	3,2
  1735     00AF  28E1               	goto	l1616
  1736     00B0  01F6               	clrf	___lwdiv@counter
  1737     00B1  0AF6               	incf	___lwdiv@counter,f
  1738     00B2                     l1604:
  1739     00B2  1BF1               	btfsc	___lwdiv@divisor+1,7
  1740     00B3  28C0               	goto	l1606
  1741     00B4  3001               	movlw	1
  1742     00B5                     u1825:
  1743     00B5  1003               	clrc
  1744     00B6  0DF0               	rlf	___lwdiv@divisor,f
  1745     00B7  0DF1               	rlf	___lwdiv@divisor+1,f
  1746     00B8  3EFF               	addlw	-1
  1747     00B9  1D03               	skipz
  1748     00BA  28B5               	goto	u1825
  1749     00BB  3001               	movlw	1
  1750     00BC  00FF               	movwf	127
  1751     00BD  087F               	movf	127,w
  1752     00BE  07F6               	addwf	___lwdiv@counter,f
  1753     00BF  28B2               	goto	l1604
  1754     00C0                     l1606:
  1755     00C0  3001               	movlw	1
  1756     00C1                     u1845:
  1757     00C1  1003               	clrc
  1758     00C2  0DF4               	rlf	___lwdiv@quotient,f
  1759     00C3  0DF5               	rlf	___lwdiv@quotient+1,f
  1760     00C4  3EFF               	addlw	-1
  1761     00C5  1D03               	skipz
  1762     00C6  28C1               	goto	u1845
  1763     00C7  0871               	movf	___lwdiv@divisor+1,w
  1764     00C8  0273               	subwf	___lwdiv@dividend+1,w
  1765     00C9  1D03               	skipz
  1766     00CA  28CD               	goto	u1855
  1767     00CB  0870               	movf	___lwdiv@divisor,w
  1768     00CC  0272               	subwf	___lwdiv@dividend,w
  1769     00CD                     u1855:
  1770     00CD  1C03               	skipc
  1771     00CE  28D6               	goto	l1612
  1772     00CF  0870               	movf	___lwdiv@divisor,w
  1773     00D0  02F2               	subwf	___lwdiv@dividend,f
  1774     00D1  0871               	movf	___lwdiv@divisor+1,w
  1775     00D2  1C03               	skipc
  1776     00D3  03F3               	decf	___lwdiv@dividend+1,f
  1777     00D4  02F3               	subwf	___lwdiv@dividend+1,f
  1778     00D5  1474               	bsf	___lwdiv@quotient,0
  1779     00D6                     l1612:
  1780     00D6  3001               	movlw	1
  1781     00D7                     u1865:
  1782     00D7  1003               	clrc
  1783     00D8  0CF1               	rrf	___lwdiv@divisor+1,f
  1784     00D9  0CF0               	rrf	___lwdiv@divisor,f
  1785     00DA  3EFF               	addlw	-1
  1786     00DB  1D03               	skipz
  1787     00DC  28D7               	goto	u1865
  1788     00DD  3001               	movlw	1
  1789     00DE  02F6               	subwf	___lwdiv@counter,f
  1790     00DF  1D03               	btfss	3,2
  1791     00E0  28C0               	goto	l1606
  1792     00E1                     l1616:
  1793     00E1  0875               	movf	___lwdiv@quotient+1,w
  1794     00E2  00F1               	movwf	?___lwdiv+1
  1795     00E3  0874               	movf	___lwdiv@quotient,w
  1796     00E4  00F0               	movwf	?___lwdiv
  1797     00E5  0008               	return
  1798     00E6                     __end_of___lwdiv:
  1799                           
  1800                           	psect	text4
  1801     029F                     __ptext4:	
  1802 ;; *************** function _map *****************
  1803 ;; Defined at:
  1804 ;;		line 144 in file "MEK303-PROJECT.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;  x               3   55[BANK0 ] float 
  1807 ;;  in_min          3   58[BANK0 ] float 
  1808 ;;  in_max          3   61[BANK0 ] float 
  1809 ;;  out_min         3   64[BANK0 ] float 
  1810 ;;  out_max         3   67[BANK0 ] float 
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;		None
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  2   55[BANK0 ] int 
  1815 ;; Registers used:
  1816 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 300/0
  1819 ;;		On exit  : 300/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1822 ;;      Params:         0      15       0       0       0
  1823 ;;      Locals:         0       3       0       0       0
  1824 ;;      Temps:          0       0       0       0       0
  1825 ;;      Totals:         0      18       0       0       0
  1826 ;;Total ram usage:       18 bytes
  1827 ;; Hardware stack levels used: 1
  1828 ;; Hardware stack levels required when called: 3
  1829 ;; This function calls:
  1830 ;;		___ftadd
  1831 ;;		___ftdiv
  1832 ;;		___ftmul
  1833 ;;		___ftsub
  1834 ;;		___fttol
  1835 ;; This function is called by:
  1836 ;;		_main
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840     029F                     _map:	
  1841                           ;psect for function _map
  1842                           
  1843                           
  1844                           ;MEK303-PROJECT.c: 146: return (int)((x - in_min) * (out_max - out_min) / (in_max - in_m
      +                          in) + out_min);
  1845                           
  1846                           ;incstack = 0
  1847                           ; Regs used in _map: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1848     029F  0857               	movf	map@x,w
  1849     02A0  00A9               	movwf	___ftsub@f1
  1850     02A1  0858               	movf	map@x+1,w
  1851     02A2  00AA               	movwf	___ftsub@f1+1
  1852     02A3  0859               	movf	map@x+2,w
  1853     02A4  00AB               	movwf	___ftsub@f1+2
  1854     02A5  085A               	movf	map@in_min,w
  1855     02A6  00A6               	movwf	___ftsub@f2
  1856     02A7  085B               	movf	map@in_min+1,w
  1857     02A8  00A7               	movwf	___ftsub@f2+1
  1858     02A9  085C               	movf	map@in_min+2,w
  1859     02AA  00A8               	movwf	___ftsub@f2+2
  1860     02AB  120A  158A  27E3  120A  118A  	fcall	___ftsub
  1861     02B0  0826               	movf	?___ftsub,w
  1862     02B1  00AF               	movwf	___ftmul@f2
  1863     02B2  0827               	movf	?___ftsub+1,w
  1864     02B3  00B0               	movwf	___ftmul@f2+1
  1865     02B4  0828               	movf	?___ftsub+2,w
  1866     02B5  00B1               	movwf	___ftmul@f2+2
  1867     02B6  0863               	movf	map@out_max,w
  1868     02B7  00A9               	movwf	___ftsub@f1
  1869     02B8  0864               	movf	map@out_max+1,w
  1870     02B9  00AA               	movwf	___ftsub@f1+1
  1871     02BA  0865               	movf	map@out_max+2,w
  1872     02BB  00AB               	movwf	___ftsub@f1+2
  1873     02BC  0860               	movf	map@out_min,w
  1874     02BD  00A6               	movwf	___ftsub@f2
  1875     02BE  0861               	movf	map@out_min+1,w
  1876     02BF  00A7               	movwf	___ftsub@f2+1
  1877     02C0  0862               	movf	map@out_min+2,w
  1878     02C1  00A8               	movwf	___ftsub@f2+2
  1879     02C2  120A  158A  27E3  120A  118A  	fcall	___ftsub
  1880     02C7  0826               	movf	?___ftsub,w
  1881     02C8  00AC               	movwf	___ftmul@f1
  1882     02C9  0827               	movf	?___ftsub+1,w
  1883     02CA  00AD               	movwf	___ftmul@f1+1
  1884     02CB  0828               	movf	?___ftsub+2,w
  1885     02CC  00AE               	movwf	___ftmul@f1+2
  1886     02CD  120A  118A  23A5  120A  118A  	fcall	___ftmul
  1887     02D2  082C               	movf	?___ftmul,w
  1888     02D3  00BE               	movwf	___ftdiv@f1
  1889     02D4  082D               	movf	?___ftmul+1,w
  1890     02D5  00BF               	movwf	___ftdiv@f1+1
  1891     02D6  082E               	movf	?___ftmul+2,w
  1892     02D7  00C0               	movwf	___ftdiv@f1+2
  1893     02D8  085D               	movf	map@in_max,w
  1894     02D9  00A9               	movwf	___ftsub@f1
  1895     02DA  085E               	movf	map@in_max+1,w
  1896     02DB  00AA               	movwf	___ftsub@f1+1
  1897     02DC  085F               	movf	map@in_max+2,w
  1898     02DD  00AB               	movwf	___ftsub@f1+2
  1899     02DE  085A               	movf	map@in_min,w
  1900     02DF  00A6               	movwf	___ftsub@f2
  1901     02E0  085B               	movf	map@in_min+1,w
  1902     02E1  00A7               	movwf	___ftsub@f2+1
  1903     02E2  085C               	movf	map@in_min+2,w
  1904     02E3  00A8               	movwf	___ftsub@f2+2
  1905     02E4  120A  158A  27E3  120A  118A  	fcall	___ftsub
  1906     02E9  0826               	movf	?___ftsub,w
  1907     02EA  00BB               	movwf	___ftdiv@f2
  1908     02EB  0827               	movf	?___ftsub+1,w
  1909     02EC  00BC               	movwf	___ftdiv@f2+1
  1910     02ED  0828               	movf	?___ftsub+2,w
  1911     02EE  00BD               	movwf	___ftdiv@f2+2
  1912     02EF  120A  118A  2319  120A  118A  	fcall	___ftdiv
  1913     02F4  083B               	movf	?___ftdiv,w
  1914     02F5  00E6               	movwf	_map$850
  1915     02F6  083C               	movf	?___ftdiv+1,w
  1916     02F7  00E7               	movwf	_map$850+1
  1917     02F8  083D               	movf	?___ftdiv+2,w
  1918     02F9  00E8               	movwf	_map$850+2
  1919                           
  1920                           ;MEK303-PROJECT.c: 146: return (int)((x - in_min) * (out_max - out_min) / (in_max - in_m
      +                          in) + out_min);
  1921     02FA  0866               	movf	_map$850,w
  1922     02FB  00FB               	movwf	___ftadd@f2
  1923     02FC  0867               	movf	_map$850+1,w
  1924     02FD  00FC               	movwf	___ftadd@f2+1
  1925     02FE  0868               	movf	_map$850+2,w
  1926     02FF  00FD               	movwf	___ftadd@f2+2
  1927     0300  0860               	movf	map@out_min,w
  1928     0301  00F8               	movwf	___ftadd@f1
  1929     0302  0861               	movf	map@out_min+1,w
  1930     0303  00F9               	movwf	___ftadd@f1+1
  1931     0304  0862               	movf	map@out_min+2,w
  1932     0305  00FA               	movwf	___ftadd@f1+2
  1933     0306  120A  118A  2508  120A  118A  	fcall	___ftadd
  1934     030B  0878               	movf	?___ftadd,w
  1935     030C  00CA               	movwf	___fttol@f1
  1936     030D  0879               	movf	?___ftadd+1,w
  1937     030E  00CB               	movwf	___fttol@f1+1
  1938     030F  087A               	movf	?___ftadd+2,w
  1939     0310  00CC               	movwf	___fttol@f1+2
  1940     0311  120A  118A  2228   	fcall	___fttol
  1941     0314  084B               	movf	?___fttol+1,w
  1942     0315  00D8               	movwf	?_map+1
  1943     0316  084A               	movf	?___fttol,w
  1944     0317  00D7               	movwf	?_map
  1945     0318  0008               	return
  1946     0319                     __end_of_map:
  1947                           
  1948                           	psect	text5
  1949     0228                     __ptext5:	
  1950 ;; *************** function ___fttol *****************
  1951 ;; Defined at:
  1952 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\fttol.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  f1              3   42[BANK0 ] float 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;  lval            4   50[BANK0 ] unsigned long 
  1957 ;;  exp1            1   54[BANK0 ] unsigned char 
  1958 ;;  sign1           1   49[BANK0 ] unsigned char 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  4   42[BANK0 ] long 
  1961 ;; Registers used:
  1962 ;;		wreg, status,2, status,0, btemp+1
  1963 ;; Tracked objects:
  1964 ;;		On entry : 300/0
  1965 ;;		On exit  : 300/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1968 ;;      Params:         0       4       0       0       0
  1969 ;;      Locals:         0       6       0       0       0
  1970 ;;      Temps:          0       3       0       0       0
  1971 ;;      Totals:         0      13       0       0       0
  1972 ;;Total ram usage:       13 bytes
  1973 ;; Hardware stack levels used: 1
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_map
  1978 ;;		_main
  1979 ;; This function uses a non-reentrant model
  1980 ;;
  1981                           
  1982     0228                     ___fttol:	
  1983                           ;psect for function ___fttol
  1984                           
  1985                           
  1986                           ;incstack = 0
  1987                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  1988     0228  084A               	movf	___fttol@f1,w
  1989     0229  00CE               	movwf	??___fttol
  1990     022A  084B               	movf	___fttol@f1+1,w
  1991     022B  00CF               	movwf	??___fttol+1
  1992     022C  084C               	movf	___fttol@f1+2,w
  1993     022D  00D0               	movwf	??___fttol+2
  1994     022E  1003               	clrc
  1995     022F  0D4F               	rlf	??___fttol+1,w
  1996     0230  0D50               	rlf	??___fttol+2,w
  1997     0231  00D6               	movwf	___fttol@exp1
  1998     0232  0856               	movf	___fttol@exp1,w
  1999     0233  1D03               	btfss	3,2
  2000     0234  2A3E               	goto	l1556
  2001     0235                     l1552:
  2002     0235  3000               	movlw	0
  2003     0236  00CD               	movwf	?___fttol+3
  2004     0237  3000               	movlw	0
  2005     0238  00CC               	movwf	?___fttol+2
  2006     0239  3000               	movlw	0
  2007     023A  00CB               	movwf	?___fttol+1
  2008     023B  3000               	movlw	0
  2009     023C  00CA               	movwf	?___fttol
  2010     023D  0008               	return
  2011     023E                     l1556:
  2012     023E  084A               	movf	___fttol@f1,w
  2013     023F  00CE               	movwf	??___fttol
  2014     0240  084B               	movf	___fttol@f1+1,w
  2015     0241  00CF               	movwf	??___fttol+1
  2016     0242  084C               	movf	___fttol@f1+2,w
  2017     0243  00D0               	movwf	??___fttol+2
  2018     0244  3017               	movlw	23
  2019     0245                     u1725:
  2020     0245  1003               	clrc
  2021     0246  0CD0               	rrf	??___fttol+2,f
  2022     0247  0CCF               	rrf	??___fttol+1,f
  2023     0248  0CCE               	rrf	??___fttol,f
  2024     0249  3EFF               	addlw	-1
  2025     024A  1D03               	skipz
  2026     024B  2A45               	goto	u1725
  2027     024C  084E               	movf	??___fttol,w
  2028     024D  00D1               	movwf	___fttol@sign1
  2029     024E  17CB               	bsf	___fttol@f1+1,7
  2030     024F  30FF               	movlw	255
  2031     0250  05CA               	andwf	___fttol@f1,f
  2032     0251  30FF               	movlw	255
  2033     0252  05CB               	andwf	___fttol@f1+1,f
  2034     0253  3000               	movlw	0
  2035     0254  05CC               	andwf	___fttol@f1+2,f
  2036     0255  084A               	movf	___fttol@f1,w
  2037     0256  00D2               	movwf	___fttol@lval
  2038     0257  084B               	movf	___fttol@f1+1,w
  2039     0258  00D3               	movwf	___fttol@lval+1
  2040     0259  084C               	movf	___fttol@f1+2,w
  2041     025A  00D4               	movwf	___fttol@lval+2
  2042     025B  01D5               	clrf	___fttol@lval+3
  2043     025C  308E               	movlw	142
  2044     025D  02D6               	subwf	___fttol@exp1,f
  2045     025E  1FD6               	btfss	___fttol@exp1,7
  2046     025F  2A75               	goto	l1578
  2047     0260  0856               	movf	___fttol@exp1,w
  2048     0261  3A80               	xorlw	128
  2049     0262  3E8F               	addlw	143
  2050     0263  1C03               	btfss	3,0
  2051     0264  2A35               	goto	l1552
  2052     0265                     l1574:
  2053     0265  3001               	movlw	1
  2054     0266                     u1755:
  2055     0266  1003               	clrc
  2056     0267  0CD5               	rrf	___fttol@lval+3,f
  2057     0268  0CD4               	rrf	___fttol@lval+2,f
  2058     0269  0CD3               	rrf	___fttol@lval+1,f
  2059     026A  0CD2               	rrf	___fttol@lval,f
  2060     026B  3EFF               	addlw	-1
  2061     026C  1D03               	skipz
  2062     026D  2A66               	goto	u1755
  2063     026E  3001               	movlw	1
  2064     026F  00FF               	movwf	127
  2065     0270  087F               	movf	127,w
  2066     0271  07D6               	addwf	___fttol@exp1,f
  2067     0272  1903               	btfsc	3,2
  2068     0273  2A88               	goto	l1586
  2069     0274  2A65               	goto	l1574
  2070     0275                     l1578:
  2071     0275  3018               	movlw	24
  2072     0276  0256               	subwf	___fttol@exp1,w
  2073     0277  1803               	btfsc	3,0
  2074     0278  2A35               	goto	l1552
  2075     0279                     l540:
  2076     0279  0856               	movf	___fttol@exp1,w
  2077     027A  1903               	btfsc	3,2
  2078     027B  2A88               	goto	l1586
  2079     027C  3001               	movlw	1
  2080     027D  00CE               	movwf	??___fttol
  2081     027E                     u1785:
  2082     027E  1003               	clrc
  2083     027F  0DD2               	rlf	___fttol@lval,f
  2084     0280  0DD3               	rlf	___fttol@lval+1,f
  2085     0281  0DD4               	rlf	___fttol@lval+2,f
  2086     0282  0DD5               	rlf	___fttol@lval+3,f
  2087     0283  0BCE               	decfsz	??___fttol,f
  2088     0284  2A7E               	goto	u1785
  2089     0285  3001               	movlw	1
  2090     0286  02D6               	subwf	___fttol@exp1,f
  2091     0287  2A79               	goto	l540
  2092     0288                     l1586:
  2093     0288  0851               	movf	___fttol@sign1,w
  2094     0289  1903               	btfsc	3,2
  2095     028A  2A96               	goto	l1590
  2096     028B  09D2               	comf	___fttol@lval,f
  2097     028C  09D3               	comf	___fttol@lval+1,f
  2098     028D  09D4               	comf	___fttol@lval+2,f
  2099     028E  09D5               	comf	___fttol@lval+3,f
  2100     028F  0AD2               	incf	___fttol@lval,f
  2101     0290  1903               	skipnz
  2102     0291  0AD3               	incf	___fttol@lval+1,f
  2103     0292  1903               	skipnz
  2104     0293  0AD4               	incf	___fttol@lval+2,f
  2105     0294  1903               	skipnz
  2106     0295  0AD5               	incf	___fttol@lval+3,f
  2107     0296                     l1590:
  2108     0296  0855               	movf	___fttol@lval+3,w
  2109     0297  00CD               	movwf	?___fttol+3
  2110     0298  0854               	movf	___fttol@lval+2,w
  2111     0299  00CC               	movwf	?___fttol+2
  2112     029A  0853               	movf	___fttol@lval+1,w
  2113     029B  00CB               	movwf	?___fttol+1
  2114     029C  0852               	movf	___fttol@lval,w
  2115     029D  00CA               	movwf	?___fttol
  2116     029E  0008               	return
  2117     029F                     __end_of___fttol:
  2118                           
  2119                           	psect	text6
  2120     0FE3                     __ptext6:	
  2121 ;; *************** function ___ftsub *****************
  2122 ;; Defined at:
  2123 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\ftsub.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  f2              3    6[BANK0 ] float 
  2126 ;;  f1              3    9[BANK0 ] float 
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  3    6[BANK0 ] float 
  2131 ;; Registers used:
  2132 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2133 ;; Tracked objects:
  2134 ;;		On entry : 300/0
  2135 ;;		On exit  : 300/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2138 ;;      Params:         0       6       0       0       0
  2139 ;;      Locals:         0       0       0       0       0
  2140 ;;      Temps:          0       0       0       0       0
  2141 ;;      Totals:         0       6       0       0       0
  2142 ;;Total ram usage:        6 bytes
  2143 ;; Hardware stack levels used: 1
  2144 ;; Hardware stack levels required when called: 2
  2145 ;; This function calls:
  2146 ;;		___ftadd
  2147 ;; This function is called by:
  2148 ;;		_map
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152     0FE3                     ___ftsub:	
  2153                           ;psect for function ___ftsub
  2154                           
  2155                           
  2156                           ;incstack = 0
  2157                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2158     0FE3  0828               	movf	___ftsub@f2+2,w
  2159     0FE4  0427               	iorwf	___ftsub@f2+1,w
  2160     0FE5  0426               	iorwf	___ftsub@f2,w
  2161     0FE6  1903               	skipnz
  2162     0FE7  2FEA               	goto	l1546
  2163     0FE8  3080               	movlw	128
  2164     0FE9  06A8               	xorwf	___ftsub@f2+2,f
  2165     0FEA                     l1546:
  2166     0FEA  0829               	movf	___ftsub@f1,w
  2167     0FEB  00F8               	movwf	___ftadd@f1
  2168     0FEC  082A               	movf	___ftsub@f1+1,w
  2169     0FED  00F9               	movwf	___ftadd@f1+1
  2170     0FEE  082B               	movf	___ftsub@f1+2,w
  2171     0FEF  00FA               	movwf	___ftadd@f1+2
  2172     0FF0  0826               	movf	___ftsub@f2,w
  2173     0FF1  00FB               	movwf	___ftadd@f2
  2174     0FF2  0827               	movf	___ftsub@f2+1,w
  2175     0FF3  00FC               	movwf	___ftadd@f2+1
  2176     0FF4  0828               	movf	___ftsub@f2+2,w
  2177     0FF5  00FD               	movwf	___ftadd@f2+2
  2178     0FF6  120A  118A  2508   	fcall	___ftadd
  2179     0FF9  0878               	movf	?___ftadd,w
  2180     0FFA  00A6               	movwf	?___ftsub
  2181     0FFB  0879               	movf	?___ftadd+1,w
  2182     0FFC  00A7               	movwf	?___ftsub+1
  2183     0FFD  087A               	movf	?___ftadd+2,w
  2184     0FFE  00A8               	movwf	?___ftsub+2
  2185     0FFF  0008               	return
  2186     1000                     __end_of___ftsub:
  2187                           
  2188                           	psect	text7
  2189     0508                     __ptext7:	
  2190 ;; *************** function ___ftadd *****************
  2191 ;; Defined at:
  2192 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\ftadd.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  f1              3    8[COMMON] float 
  2195 ;;  f2              3   11[COMMON] float 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  exp1            1    5[BANK0 ] unsigned char 
  2198 ;;  exp2            1    4[BANK0 ] unsigned char 
  2199 ;;  sign            1    3[BANK0 ] unsigned char 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  3    8[COMMON] float 
  2202 ;; Registers used:
  2203 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 300/0
  2206 ;;		On exit  : 300/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2209 ;;      Params:         6       0       0       0       0
  2210 ;;      Locals:         0       3       0       0       0
  2211 ;;      Temps:          0       3       0       0       0
  2212 ;;      Totals:         6       6       0       0       0
  2213 ;;Total ram usage:       12 bytes
  2214 ;; Hardware stack levels used: 1
  2215 ;; Hardware stack levels required when called: 1
  2216 ;; This function calls:
  2217 ;;		___ftpack
  2218 ;; This function is called by:
  2219 ;;		_map
  2220 ;;		___ftsub
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224     0508                     ___ftadd:	
  2225                           ;psect for function ___ftadd
  2226                           
  2227                           
  2228                           ;incstack = 0
  2229                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2230     0508  0878               	movf	___ftadd@f1,w
  2231     0509  00A0               	movwf	??___ftadd
  2232     050A  0879               	movf	___ftadd@f1+1,w
  2233     050B  00A1               	movwf	??___ftadd+1
  2234     050C  087A               	movf	___ftadd@f1+2,w
  2235     050D  00A2               	movwf	??___ftadd+2
  2236     050E  1003               	clrc
  2237     050F  0D21               	rlf	??___ftadd+1,w
  2238     0510  0D22               	rlf	??___ftadd+2,w
  2239     0511  00A5               	movwf	___ftadd@exp1
  2240     0512  087B               	movf	___ftadd@f2,w
  2241     0513  00A0               	movwf	??___ftadd
  2242     0514  087C               	movf	___ftadd@f2+1,w
  2243     0515  00A1               	movwf	??___ftadd+1
  2244     0516  087D               	movf	___ftadd@f2+2,w
  2245     0517  00A2               	movwf	??___ftadd+2
  2246     0518  1003               	clrc
  2247     0519  0D21               	rlf	??___ftadd+1,w
  2248     051A  0D22               	rlf	??___ftadd+2,w
  2249     051B  00A4               	movwf	___ftadd@exp2
  2250     051C  0825               	movf	___ftadd@exp1,w
  2251     051D  1903               	btfsc	3,2
  2252     051E  2D2B               	goto	l1342
  2253     051F  0824               	movf	___ftadd@exp2,w
  2254     0520  0225               	subwf	___ftadd@exp1,w
  2255     0521  1803               	skipnc
  2256     0522  2D32               	goto	l1346
  2257     0523  0824               	movf	___ftadd@exp2,w
  2258     0524  00A0               	movwf	??___ftadd
  2259     0525  0825               	movf	___ftadd@exp1,w
  2260     0526  02A0               	subwf	??___ftadd,f
  2261     0527  3019               	movlw	25
  2262     0528  0220               	subwf	??___ftadd,w
  2263     0529  1C03               	skipc
  2264     052A  2D32               	goto	l1346
  2265     052B                     l1342:
  2266     052B  087B               	movf	___ftadd@f2,w
  2267     052C  00F8               	movwf	?___ftadd
  2268     052D  087C               	movf	___ftadd@f2+1,w
  2269     052E  00F9               	movwf	?___ftadd+1
  2270     052F  087D               	movf	___ftadd@f2+2,w
  2271     0530  00FA               	movwf	?___ftadd+2
  2272     0531  0008               	return
  2273     0532                     l1346:
  2274     0532  0824               	movf	___ftadd@exp2,w
  2275     0533  1903               	btfsc	3,2
  2276     0534  0008               	return
  2277     0535  0825               	movf	___ftadd@exp1,w
  2278     0536  0224               	subwf	___ftadd@exp2,w
  2279     0537  1803               	skipnc
  2280     0538  2D41               	goto	l1352
  2281     0539  0825               	movf	___ftadd@exp1,w
  2282     053A  00A0               	movwf	??___ftadd
  2283     053B  0824               	movf	___ftadd@exp2,w
  2284     053C  02A0               	subwf	??___ftadd,f
  2285     053D  3019               	movlw	25
  2286     053E  0220               	subwf	??___ftadd,w
  2287     053F  1803               	btfsc	3,0
  2288     0540  0008               	return
  2289     0541                     l1352:
  2290     0541  3006               	movlw	6
  2291     0542  00A3               	movwf	___ftadd@sign
  2292     0543  1BFA               	btfsc	___ftadd@f1+2,7
  2293     0544  17A3               	bsf	___ftadd@sign,7
  2294     0545  1BFD               	btfsc	___ftadd@f2+2,7
  2295     0546  1723               	bsf	___ftadd@sign,6
  2296     0547  17F9               	bsf	___ftadd@f1+1,7
  2297     0548  30FF               	movlw	255
  2298     0549  05F8               	andwf	___ftadd@f1,f
  2299     054A  30FF               	movlw	255
  2300     054B  05F9               	andwf	___ftadd@f1+1,f
  2301     054C  3000               	movlw	0
  2302     054D  05FA               	andwf	___ftadd@f1+2,f
  2303     054E  17FC               	bsf	___ftadd@f2+1,7
  2304     054F  30FF               	movlw	255
  2305     0550  05FB               	andwf	___ftadd@f2,f
  2306     0551  30FF               	movlw	255
  2307     0552  05FC               	andwf	___ftadd@f2+1,f
  2308     0553  3000               	movlw	0
  2309     0554  05FD               	andwf	___ftadd@f2+2,f
  2310     0555  0824               	movf	___ftadd@exp2,w
  2311     0556  0225               	subwf	___ftadd@exp1,w
  2312     0557  1803               	skipnc
  2313     0558  2D7F               	goto	l1376
  2314     0559                     l1364:
  2315     0559  3001               	movlw	1
  2316     055A                     u1365:
  2317     055A  1003               	clrc
  2318     055B  0DFB               	rlf	___ftadd@f2,f
  2319     055C  0DFC               	rlf	___ftadd@f2+1,f
  2320     055D  0DFD               	rlf	___ftadd@f2+2,f
  2321     055E  3EFF               	addlw	-1
  2322     055F  1D03               	skipz
  2323     0560  2D5A               	goto	u1365
  2324     0561  3001               	movlw	1
  2325     0562  02A4               	subwf	___ftadd@exp2,f
  2326     0563  0824               	movf	___ftadd@exp2,w
  2327     0564  0625               	xorwf	___ftadd@exp1,w
  2328     0565  1903               	skipnz
  2329     0566  2D7A               	goto	l1374
  2330     0567  3001               	movlw	1
  2331     0568  02A3               	subwf	___ftadd@sign,f
  2332     0569  0823               	movf	___ftadd@sign,w
  2333     056A  3907               	andlw	7
  2334     056B  1903               	btfsc	3,2
  2335     056C  2D7A               	goto	l1374
  2336     056D  2D59               	goto	l1364
  2337     056E                     l1370:
  2338     056E  3001               	movlw	1
  2339     056F                     u1395:
  2340     056F  1003               	clrc
  2341     0570  0CFA               	rrf	___ftadd@f1+2,f
  2342     0571  0CF9               	rrf	___ftadd@f1+1,f
  2343     0572  0CF8               	rrf	___ftadd@f1,f
  2344     0573  3EFF               	addlw	-1
  2345     0574  1D03               	skipz
  2346     0575  2D6F               	goto	u1395
  2347     0576  3001               	movlw	1
  2348     0577  00FF               	movwf	127
  2349     0578  087F               	movf	127,w
  2350     0579  07A5               	addwf	___ftadd@exp1,f
  2351     057A                     l1374:
  2352     057A  0825               	movf	___ftadd@exp1,w
  2353     057B  0624               	xorwf	___ftadd@exp2,w
  2354     057C  1903               	btfsc	3,2
  2355     057D  2DA8               	goto	l480
  2356     057E  2D6E               	goto	l1370
  2357     057F                     l1376:
  2358     057F  0825               	movf	___ftadd@exp1,w
  2359     0580  0224               	subwf	___ftadd@exp2,w
  2360     0581  1803               	skipnc
  2361     0582  2DA8               	goto	l480
  2362     0583                     l1378:
  2363     0583  3001               	movlw	1
  2364     0584                     u1425:
  2365     0584  1003               	clrc
  2366     0585  0DF8               	rlf	___ftadd@f1,f
  2367     0586  0DF9               	rlf	___ftadd@f1+1,f
  2368     0587  0DFA               	rlf	___ftadd@f1+2,f
  2369     0588  3EFF               	addlw	-1
  2370     0589  1D03               	skipz
  2371     058A  2D84               	goto	u1425
  2372     058B  3001               	movlw	1
  2373     058C  02A5               	subwf	___ftadd@exp1,f
  2374     058D  0824               	movf	___ftadd@exp2,w
  2375     058E  0625               	xorwf	___ftadd@exp1,w
  2376     058F  1903               	skipnz
  2377     0590  2DA4               	goto	l1388
  2378     0591  3001               	movlw	1
  2379     0592  02A3               	subwf	___ftadd@sign,f
  2380     0593  0823               	movf	___ftadd@sign,w
  2381     0594  3907               	andlw	7
  2382     0595  1903               	btfsc	3,2
  2383     0596  2DA4               	goto	l1388
  2384     0597  2D83               	goto	l1378
  2385     0598                     l1384:
  2386     0598  3001               	movlw	1
  2387     0599                     u1455:
  2388     0599  1003               	clrc
  2389     059A  0CFD               	rrf	___ftadd@f2+2,f
  2390     059B  0CFC               	rrf	___ftadd@f2+1,f
  2391     059C  0CFB               	rrf	___ftadd@f2,f
  2392     059D  3EFF               	addlw	-1
  2393     059E  1D03               	skipz
  2394     059F  2D99               	goto	u1455
  2395     05A0  3001               	movlw	1
  2396     05A1  00FF               	movwf	127
  2397     05A2  087F               	movf	127,w
  2398     05A3  07A4               	addwf	___ftadd@exp2,f
  2399     05A4                     l1388:
  2400     05A4  0825               	movf	___ftadd@exp1,w
  2401     05A5  0624               	xorwf	___ftadd@exp2,w
  2402     05A6  1D03               	skipz
  2403     05A7  2D98               	goto	l1384
  2404     05A8                     l480:
  2405     05A8  1FA3               	btfss	___ftadd@sign,7
  2406     05A9  2DBA               	goto	l1392
  2407     05AA  30FF               	movlw	255
  2408     05AB  06F8               	xorwf	___ftadd@f1,f
  2409     05AC  30FF               	movlw	255
  2410     05AD  06F9               	xorwf	___ftadd@f1+1,f
  2411     05AE  30FF               	movlw	255
  2412     05AF  06FA               	xorwf	___ftadd@f1+2,f
  2413     05B0  3001               	movlw	1
  2414     05B1  07F8               	addwf	___ftadd@f1,f
  2415     05B2  3000               	movlw	0
  2416     05B3  1803               	skipnc
  2417     05B4  3001               	movlw	1
  2418     05B5  07F9               	addwf	___ftadd@f1+1,f
  2419     05B6  3000               	movlw	0
  2420     05B7  1803               	skipnc
  2421     05B8  3001               	movlw	1
  2422     05B9  07FA               	addwf	___ftadd@f1+2,f
  2423     05BA                     l1392:
  2424     05BA  1F23               	btfss	___ftadd@sign,6
  2425     05BB  2DCC               	goto	l1396
  2426     05BC  30FF               	movlw	255
  2427     05BD  06FB               	xorwf	___ftadd@f2,f
  2428     05BE  30FF               	movlw	255
  2429     05BF  06FC               	xorwf	___ftadd@f2+1,f
  2430     05C0  30FF               	movlw	255
  2431     05C1  06FD               	xorwf	___ftadd@f2+2,f
  2432     05C2  3001               	movlw	1
  2433     05C3  07FB               	addwf	___ftadd@f2,f
  2434     05C4  3000               	movlw	0
  2435     05C5  1803               	skipnc
  2436     05C6  3001               	movlw	1
  2437     05C7  07FC               	addwf	___ftadd@f2+1,f
  2438     05C8  3000               	movlw	0
  2439     05C9  1803               	skipnc
  2440     05CA  3001               	movlw	1
  2441     05CB  07FD               	addwf	___ftadd@f2+2,f
  2442     05CC                     l1396:
  2443     05CC  01A3               	clrf	___ftadd@sign
  2444     05CD  0878               	movf	___ftadd@f1,w
  2445     05CE  07FB               	addwf	___ftadd@f2,f
  2446     05CF  0879               	movf	___ftadd@f1+1,w
  2447     05D0  1103               	clrz
  2448     05D1  1803               	skipnc
  2449     05D2  0A79               	incf	___ftadd@f1+1,w
  2450     05D3  1D03               	btfss	3,2
  2451     05D4  07FC               	addwf	___ftadd@f2+1,f
  2452     05D5  087A               	movf	___ftadd@f1+2,w
  2453     05D6  1103               	clrz
  2454     05D7  1803               	skipnc
  2455     05D8  0A7A               	incf	___ftadd@f1+2,w
  2456     05D9  1D03               	btfss	3,2
  2457     05DA  07FD               	addwf	___ftadd@f2+2,f
  2458     05DB  1FFD               	btfss	___ftadd@f2+2,7
  2459     05DC  2DEF               	goto	l1406
  2460     05DD  30FF               	movlw	255
  2461     05DE  06FB               	xorwf	___ftadd@f2,f
  2462     05DF  30FF               	movlw	255
  2463     05E0  06FC               	xorwf	___ftadd@f2+1,f
  2464     05E1  30FF               	movlw	255
  2465     05E2  06FD               	xorwf	___ftadd@f2+2,f
  2466     05E3  3001               	movlw	1
  2467     05E4  07FB               	addwf	___ftadd@f2,f
  2468     05E5  3000               	movlw	0
  2469     05E6  1803               	skipnc
  2470     05E7  3001               	movlw	1
  2471     05E8  07FC               	addwf	___ftadd@f2+1,f
  2472     05E9  3000               	movlw	0
  2473     05EA  1803               	skipnc
  2474     05EB  3001               	movlw	1
  2475     05EC  07FD               	addwf	___ftadd@f2+2,f
  2476     05ED  01A3               	clrf	___ftadd@sign
  2477     05EE  0AA3               	incf	___ftadd@sign,f
  2478     05EF                     l1406:
  2479     05EF  087B               	movf	___ftadd@f2,w
  2480     05F0  00F0               	movwf	___ftpack@arg
  2481     05F1  087C               	movf	___ftadd@f2+1,w
  2482     05F2  00F1               	movwf	___ftpack@arg+1
  2483     05F3  087D               	movf	___ftadd@f2+2,w
  2484     05F4  00F2               	movwf	___ftpack@arg+2
  2485     05F5  0825               	movf	___ftadd@exp1,w
  2486     05F6  00F3               	movwf	___ftpack@exp
  2487     05F7  0823               	movf	___ftadd@sign,w
  2488     05F8  00F4               	movwf	___ftpack@sign
  2489     05F9  120A  118A  21BC   	fcall	___ftpack
  2490     05FC  0870               	movf	?___ftpack,w
  2491     05FD  00F8               	movwf	?___ftadd
  2492     05FE  0871               	movf	?___ftpack+1,w
  2493     05FF  00F9               	movwf	?___ftadd+1
  2494     0600  0872               	movf	?___ftpack+2,w
  2495     0601  00FA               	movwf	?___ftadd+2
  2496     0602  0008               	return
  2497     0603                     __end_of___ftadd:
  2498                           
  2499                           	psect	text8
  2500     03A5                     __ptext8:	
  2501 ;; *************** function ___ftmul *****************
  2502 ;; Defined at:
  2503 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\ftmul.c"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;  f1              3   12[BANK0 ] float 
  2506 ;;  f2              3   15[BANK0 ] float 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  2509 ;;  sign            1   26[BANK0 ] unsigned char 
  2510 ;;  cntr            1   25[BANK0 ] unsigned char 
  2511 ;;  exp             1   21[BANK0 ] unsigned char 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  3   12[BANK0 ] float 
  2514 ;; Registers used:
  2515 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 300/0
  2518 ;;		On exit  : 300/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2521 ;;      Params:         0       6       0       0       0
  2522 ;;      Locals:         0       6       0       0       0
  2523 ;;      Temps:          0       3       0       0       0
  2524 ;;      Totals:         0      15       0       0       0
  2525 ;;Total ram usage:       15 bytes
  2526 ;; Hardware stack levels used: 1
  2527 ;; Hardware stack levels required when called: 1
  2528 ;; This function calls:
  2529 ;;		___ftpack
  2530 ;; This function is called by:
  2531 ;;		_map
  2532 ;;		_main
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536     03A5                     ___ftmul:	
  2537                           ;psect for function ___ftmul
  2538                           
  2539                           
  2540                           ;incstack = 0
  2541                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2542     03A5  082C               	movf	___ftmul@f1,w
  2543     03A6  00B2               	movwf	??___ftmul
  2544     03A7  082D               	movf	___ftmul@f1+1,w
  2545     03A8  00B3               	movwf	??___ftmul+1
  2546     03A9  082E               	movf	___ftmul@f1+2,w
  2547     03AA  00B4               	movwf	??___ftmul+2
  2548     03AB  1003               	clrc
  2549     03AC  0D33               	rlf	??___ftmul+1,w
  2550     03AD  0D34               	rlf	??___ftmul+2,w
  2551     03AE  00B5               	movwf	___ftmul@exp
  2552     03AF  0835               	movf	___ftmul@exp,w
  2553     03B0  1D03               	btfss	3,2
  2554     03B1  2BB9               	goto	l1492
  2555     03B2  3000               	movlw	0
  2556     03B3  00AC               	movwf	?___ftmul
  2557     03B4  3000               	movlw	0
  2558     03B5  00AD               	movwf	?___ftmul+1
  2559     03B6  3000               	movlw	0
  2560     03B7  00AE               	movwf	?___ftmul+2
  2561     03B8  0008               	return
  2562     03B9                     l1492:
  2563     03B9  082F               	movf	___ftmul@f2,w
  2564     03BA  00B2               	movwf	??___ftmul
  2565     03BB  0830               	movf	___ftmul@f2+1,w
  2566     03BC  00B3               	movwf	??___ftmul+1
  2567     03BD  0831               	movf	___ftmul@f2+2,w
  2568     03BE  00B4               	movwf	??___ftmul+2
  2569     03BF  1003               	clrc
  2570     03C0  0D33               	rlf	??___ftmul+1,w
  2571     03C1  0D34               	rlf	??___ftmul+2,w
  2572     03C2  00BA               	movwf	___ftmul@sign
  2573     03C3  083A               	movf	___ftmul@sign,w
  2574     03C4  1D03               	btfss	3,2
  2575     03C5  2BCD               	goto	l1498
  2576     03C6  3000               	movlw	0
  2577     03C7  00AC               	movwf	?___ftmul
  2578     03C8  3000               	movlw	0
  2579     03C9  00AD               	movwf	?___ftmul+1
  2580     03CA  3000               	movlw	0
  2581     03CB  00AE               	movwf	?___ftmul+2
  2582     03CC  0008               	return
  2583     03CD                     l1498:
  2584     03CD  083A               	movf	___ftmul@sign,w
  2585     03CE  3E7B               	addlw	123
  2586     03CF  00FF               	movwf	127
  2587     03D0  087F               	movf	127,w
  2588     03D1  07B5               	addwf	___ftmul@exp,f
  2589     03D2  082E               	movf	___ftmul@f1+2,w
  2590     03D3  00BA               	movwf	___ftmul@sign
  2591     03D4  0831               	movf	___ftmul@f2+2,w
  2592     03D5  00FF               	movwf	127
  2593     03D6  087F               	movf	127,w
  2594     03D7  06BA               	xorwf	___ftmul@sign,f
  2595     03D8  3080               	movlw	128
  2596     03D9  00FF               	movwf	127
  2597     03DA  087F               	movf	127,w
  2598     03DB  05BA               	andwf	___ftmul@sign,f
  2599     03DC  17AD               	bsf	___ftmul@f1+1,7
  2600     03DD  17B0               	bsf	___ftmul@f2+1,7
  2601     03DE  30FF               	movlw	255
  2602     03DF  05AF               	andwf	___ftmul@f2,f
  2603     03E0  30FF               	movlw	255
  2604     03E1  05B0               	andwf	___ftmul@f2+1,f
  2605     03E2  3000               	movlw	0
  2606     03E3  05B1               	andwf	___ftmul@f2+2,f
  2607     03E4  3000               	movlw	0
  2608     03E5  00B6               	movwf	___ftmul@f3_as_product
  2609     03E6  3000               	movlw	0
  2610     03E7  00B7               	movwf	___ftmul@f3_as_product+1
  2611     03E8  3000               	movlw	0
  2612     03E9  00B8               	movwf	___ftmul@f3_as_product+2
  2613     03EA  3007               	movlw	7
  2614     03EB  00B9               	movwf	___ftmul@cntr
  2615     03EC                     l1516:
  2616     03EC  1C2C               	btfss	___ftmul@f1,0
  2617     03ED  2BFC               	goto	l1520
  2618     03EE  082F               	movf	___ftmul@f2,w
  2619     03EF  07B6               	addwf	___ftmul@f3_as_product,f
  2620     03F0  0830               	movf	___ftmul@f2+1,w
  2621     03F1  1103               	clrz
  2622     03F2  1803               	skipnc
  2623     03F3  0A30               	incf	___ftmul@f2+1,w
  2624     03F4  1D03               	btfss	3,2
  2625     03F5  07B7               	addwf	___ftmul@f3_as_product+1,f
  2626     03F6  0831               	movf	___ftmul@f2+2,w
  2627     03F7  1103               	clrz
  2628     03F8  1803               	skipnc
  2629     03F9  0A31               	incf	___ftmul@f2+2,w
  2630     03FA  1D03               	btfss	3,2
  2631     03FB  07B8               	addwf	___ftmul@f3_as_product+2,f
  2632     03FC                     l1520:
  2633     03FC  3001               	movlw	1
  2634     03FD                     u1625:
  2635     03FD  1003               	clrc
  2636     03FE  0CAE               	rrf	___ftmul@f1+2,f
  2637     03FF  0CAD               	rrf	___ftmul@f1+1,f
  2638     0400  0CAC               	rrf	___ftmul@f1,f
  2639     0401  3EFF               	addlw	-1
  2640     0402  1D03               	skipz
  2641     0403  2BFD               	goto	u1625
  2642     0404  3001               	movlw	1
  2643     0405                     u1635:
  2644     0405  1003               	clrc
  2645     0406  0DAF               	rlf	___ftmul@f2,f
  2646     0407  0DB0               	rlf	___ftmul@f2+1,f
  2647     0408  0DB1               	rlf	___ftmul@f2+2,f
  2648     0409  3EFF               	addlw	-1
  2649     040A  1D03               	skipz
  2650     040B  2C05               	goto	u1635
  2651     040C  3001               	movlw	1
  2652     040D  02B9               	subwf	___ftmul@cntr,f
  2653     040E  1D03               	btfss	3,2
  2654     040F  2BEC               	goto	l1516
  2655     0410  3009               	movlw	9
  2656     0411  00B9               	movwf	___ftmul@cntr
  2657     0412                     l1528:
  2658     0412  1C2C               	btfss	___ftmul@f1,0
  2659     0413  2C22               	goto	l1532
  2660     0414  082F               	movf	___ftmul@f2,w
  2661     0415  07B6               	addwf	___ftmul@f3_as_product,f
  2662     0416  0830               	movf	___ftmul@f2+1,w
  2663     0417  1103               	clrz
  2664     0418  1803               	skipnc
  2665     0419  0A30               	incf	___ftmul@f2+1,w
  2666     041A  1D03               	btfss	3,2
  2667     041B  07B7               	addwf	___ftmul@f3_as_product+1,f
  2668     041C  0831               	movf	___ftmul@f2+2,w
  2669     041D  1103               	clrz
  2670     041E  1803               	skipnc
  2671     041F  0A31               	incf	___ftmul@f2+2,w
  2672     0420  1D03               	btfss	3,2
  2673     0421  07B8               	addwf	___ftmul@f3_as_product+2,f
  2674     0422                     l1532:
  2675     0422  3001               	movlw	1
  2676     0423                     u1675:
  2677     0423  1003               	clrc
  2678     0424  0CAE               	rrf	___ftmul@f1+2,f
  2679     0425  0CAD               	rrf	___ftmul@f1+1,f
  2680     0426  0CAC               	rrf	___ftmul@f1,f
  2681     0427  3EFF               	addlw	-1
  2682     0428  1D03               	skipz
  2683     0429  2C23               	goto	u1675
  2684     042A  3001               	movlw	1
  2685     042B                     u1685:
  2686     042B  1003               	clrc
  2687     042C  0CB8               	rrf	___ftmul@f3_as_product+2,f
  2688     042D  0CB7               	rrf	___ftmul@f3_as_product+1,f
  2689     042E  0CB6               	rrf	___ftmul@f3_as_product,f
  2690     042F  3EFF               	addlw	-1
  2691     0430  1D03               	skipz
  2692     0431  2C2B               	goto	u1685
  2693     0432  3001               	movlw	1
  2694     0433  02B9               	subwf	___ftmul@cntr,f
  2695     0434  1D03               	btfss	3,2
  2696     0435  2C12               	goto	l1528
  2697     0436  0836               	movf	___ftmul@f3_as_product,w
  2698     0437  00F0               	movwf	___ftpack@arg
  2699     0438  0837               	movf	___ftmul@f3_as_product+1,w
  2700     0439  00F1               	movwf	___ftpack@arg+1
  2701     043A  0838               	movf	___ftmul@f3_as_product+2,w
  2702     043B  00F2               	movwf	___ftpack@arg+2
  2703     043C  0835               	movf	___ftmul@exp,w
  2704     043D  00F3               	movwf	___ftpack@exp
  2705     043E  083A               	movf	___ftmul@sign,w
  2706     043F  00F4               	movwf	___ftpack@sign
  2707     0440  120A  118A  21BC   	fcall	___ftpack
  2708     0443  0870               	movf	?___ftpack,w
  2709     0444  00AC               	movwf	?___ftmul
  2710     0445  0871               	movf	?___ftpack+1,w
  2711     0446  00AD               	movwf	?___ftmul+1
  2712     0447  0872               	movf	?___ftpack+2,w
  2713     0448  00AE               	movwf	?___ftmul+2
  2714     0449  0008               	return
  2715     044A                     __end_of___ftmul:
  2716                           
  2717                           	psect	text9
  2718     0319                     __ptext9:	
  2719 ;; *************** function ___ftdiv *****************
  2720 ;; Defined at:
  2721 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\ftdiv.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;  f2              3   27[BANK0 ] float 
  2724 ;;  f1              3   30[BANK0 ] float 
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;  f3              3   37[BANK0 ] float 
  2727 ;;  sign            1   41[BANK0 ] unsigned char 
  2728 ;;  exp             1   40[BANK0 ] unsigned char 
  2729 ;;  cntr            1   36[BANK0 ] unsigned char 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  3   27[BANK0 ] float 
  2732 ;; Registers used:
  2733 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : 300/0
  2736 ;;		On exit  : 300/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2739 ;;      Params:         0       6       0       0       0
  2740 ;;      Locals:         0       6       0       0       0
  2741 ;;      Temps:          0       3       0       0       0
  2742 ;;      Totals:         0      15       0       0       0
  2743 ;;Total ram usage:       15 bytes
  2744 ;; Hardware stack levels used: 1
  2745 ;; Hardware stack levels required when called: 1
  2746 ;; This function calls:
  2747 ;;		___ftpack
  2748 ;; This function is called by:
  2749 ;;		_map
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753     0319                     ___ftdiv:	
  2754                           ;psect for function ___ftdiv
  2755                           
  2756                           
  2757                           ;incstack = 0
  2758                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2759     0319  083E               	movf	___ftdiv@f1,w
  2760     031A  00C1               	movwf	??___ftdiv
  2761     031B  083F               	movf	___ftdiv@f1+1,w
  2762     031C  00C2               	movwf	??___ftdiv+1
  2763     031D  0840               	movf	___ftdiv@f1+2,w
  2764     031E  00C3               	movwf	??___ftdiv+2
  2765     031F  1003               	clrc
  2766     0320  0D42               	rlf	??___ftdiv+1,w
  2767     0321  0D43               	rlf	??___ftdiv+2,w
  2768     0322  00C8               	movwf	___ftdiv@exp
  2769     0323  0848               	movf	___ftdiv@exp,w
  2770     0324  1D03               	btfss	3,2
  2771     0325  2B2D               	goto	l1446
  2772     0326  3000               	movlw	0
  2773     0327  00BB               	movwf	?___ftdiv
  2774     0328  3000               	movlw	0
  2775     0329  00BC               	movwf	?___ftdiv+1
  2776     032A  3000               	movlw	0
  2777     032B  00BD               	movwf	?___ftdiv+2
  2778     032C  0008               	return
  2779     032D                     l1446:
  2780     032D  083B               	movf	___ftdiv@f2,w
  2781     032E  00C1               	movwf	??___ftdiv
  2782     032F  083C               	movf	___ftdiv@f2+1,w
  2783     0330  00C2               	movwf	??___ftdiv+1
  2784     0331  083D               	movf	___ftdiv@f2+2,w
  2785     0332  00C3               	movwf	??___ftdiv+2
  2786     0333  1003               	clrc
  2787     0334  0D42               	rlf	??___ftdiv+1,w
  2788     0335  0D43               	rlf	??___ftdiv+2,w
  2789     0336  00C9               	movwf	___ftdiv@sign
  2790     0337  0849               	movf	___ftdiv@sign,w
  2791     0338  1D03               	btfss	3,2
  2792     0339  2B41               	goto	l1452
  2793     033A  3000               	movlw	0
  2794     033B  00BB               	movwf	?___ftdiv
  2795     033C  3000               	movlw	0
  2796     033D  00BC               	movwf	?___ftdiv+1
  2797     033E  3000               	movlw	0
  2798     033F  00BD               	movwf	?___ftdiv+2
  2799     0340  0008               	return
  2800     0341                     l1452:
  2801     0341  3000               	movlw	0
  2802     0342  00C5               	movwf	___ftdiv@f3
  2803     0343  3000               	movlw	0
  2804     0344  00C6               	movwf	___ftdiv@f3+1
  2805     0345  3000               	movlw	0
  2806     0346  00C7               	movwf	___ftdiv@f3+2
  2807     0347  3089               	movlw	137
  2808     0348  0749               	addwf	___ftdiv@sign,w
  2809     0349  00C1               	movwf	??___ftdiv
  2810     034A  0841               	movf	??___ftdiv,w
  2811     034B  02C8               	subwf	___ftdiv@exp,f
  2812     034C  0840               	movf	___ftdiv@f1+2,w
  2813     034D  00C9               	movwf	___ftdiv@sign
  2814     034E  083D               	movf	___ftdiv@f2+2,w
  2815     034F  00FF               	movwf	127
  2816     0350  087F               	movf	127,w
  2817     0351  06C9               	xorwf	___ftdiv@sign,f
  2818     0352  3080               	movlw	128
  2819     0353  00FF               	movwf	127
  2820     0354  087F               	movf	127,w
  2821     0355  05C9               	andwf	___ftdiv@sign,f
  2822     0356  17BF               	bsf	___ftdiv@f1+1,7
  2823     0357  30FF               	movlw	255
  2824     0358  05BE               	andwf	___ftdiv@f1,f
  2825     0359  30FF               	movlw	255
  2826     035A  05BF               	andwf	___ftdiv@f1+1,f
  2827     035B  3000               	movlw	0
  2828     035C  05C0               	andwf	___ftdiv@f1+2,f
  2829     035D  17BC               	bsf	___ftdiv@f2+1,7
  2830     035E  30FF               	movlw	255
  2831     035F  05BB               	andwf	___ftdiv@f2,f
  2832     0360  30FF               	movlw	255
  2833     0361  05BC               	andwf	___ftdiv@f2+1,f
  2834     0362  3000               	movlw	0
  2835     0363  05BD               	andwf	___ftdiv@f2+2,f
  2836     0364  3018               	movlw	24
  2837     0365  00C4               	movwf	___ftdiv@cntr
  2838     0366                     l1472:
  2839     0366  3001               	movlw	1
  2840     0367                     u1545:
  2841     0367  1003               	clrc
  2842     0368  0DC5               	rlf	___ftdiv@f3,f
  2843     0369  0DC6               	rlf	___ftdiv@f3+1,f
  2844     036A  0DC7               	rlf	___ftdiv@f3+2,f
  2845     036B  3EFF               	addlw	-1
  2846     036C  1D03               	skipz
  2847     036D  2B67               	goto	u1545
  2848     036E  083D               	movf	___ftdiv@f2+2,w
  2849     036F  0240               	subwf	___ftdiv@f1+2,w
  2850     0370  1D03               	skipz
  2851     0371  2B78               	goto	u1555
  2852     0372  083C               	movf	___ftdiv@f2+1,w
  2853     0373  023F               	subwf	___ftdiv@f1+1,w
  2854     0374  1D03               	skipz
  2855     0375  2B78               	goto	u1555
  2856     0376  083B               	movf	___ftdiv@f2,w
  2857     0377  023E               	subwf	___ftdiv@f1,w
  2858     0378                     u1555:
  2859     0378  1C03               	skipc
  2860     0379  2B85               	goto	l1478
  2861     037A  083B               	movf	___ftdiv@f2,w
  2862     037B  02BE               	subwf	___ftdiv@f1,f
  2863     037C  083C               	movf	___ftdiv@f2+1,w
  2864     037D  1C03               	skipc
  2865     037E  0F3C               	incfsz	___ftdiv@f2+1,w
  2866     037F  02BF               	subwf	___ftdiv@f1+1,f
  2867     0380  083D               	movf	___ftdiv@f2+2,w
  2868     0381  1C03               	skipc
  2869     0382  0A3D               	incf	___ftdiv@f2+2,w
  2870     0383  02C0               	subwf	___ftdiv@f1+2,f
  2871     0384  1445               	bsf	___ftdiv@f3,0
  2872     0385                     l1478:
  2873     0385  3001               	movlw	1
  2874     0386                     u1565:
  2875     0386  1003               	clrc
  2876     0387  0DBE               	rlf	___ftdiv@f1,f
  2877     0388  0DBF               	rlf	___ftdiv@f1+1,f
  2878     0389  0DC0               	rlf	___ftdiv@f1+2,f
  2879     038A  3EFF               	addlw	-1
  2880     038B  1D03               	skipz
  2881     038C  2B86               	goto	u1565
  2882     038D  3001               	movlw	1
  2883     038E  02C4               	subwf	___ftdiv@cntr,f
  2884     038F  1D03               	btfss	3,2
  2885     0390  2B66               	goto	l1472
  2886     0391  0845               	movf	___ftdiv@f3,w
  2887     0392  00F0               	movwf	___ftpack@arg
  2888     0393  0846               	movf	___ftdiv@f3+1,w
  2889     0394  00F1               	movwf	___ftpack@arg+1
  2890     0395  0847               	movf	___ftdiv@f3+2,w
  2891     0396  00F2               	movwf	___ftpack@arg+2
  2892     0397  0848               	movf	___ftdiv@exp,w
  2893     0398  00F3               	movwf	___ftpack@exp
  2894     0399  0849               	movf	___ftdiv@sign,w
  2895     039A  00F4               	movwf	___ftpack@sign
  2896     039B  120A  118A  21BC   	fcall	___ftpack
  2897     039E  0870               	movf	?___ftpack,w
  2898     039F  00BB               	movwf	?___ftdiv
  2899     03A0  0871               	movf	?___ftpack+1,w
  2900     03A1  00BC               	movwf	?___ftdiv+1
  2901     03A2  0872               	movf	?___ftpack+2,w
  2902     03A3  00BD               	movwf	?___ftdiv+2
  2903     03A4  0008               	return
  2904     03A5                     __end_of___ftdiv:
  2905                           
  2906                           	psect	text10
  2907     0F97                     __ptext10:	
  2908 ;; *************** function _duty_send *****************
  2909 ;; Defined at:
  2910 ;;		line 149 in file "MEK303-PROJECT.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  deger           2   55[BANK0 ] int 
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;		None
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  1    wreg      void 
  2917 ;; Registers used:
  2918 ;;		wreg
  2919 ;; Tracked objects:
  2920 ;;		On entry : 300/0
  2921 ;;		On exit  : 300/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2924 ;;      Params:         0       2       0       0       0
  2925 ;;      Locals:         0       0       0       0       0
  2926 ;;      Temps:          0       2       0       0       0
  2927 ;;      Totals:         0       4       0       0       0
  2928 ;;Total ram usage:        4 bytes
  2929 ;; Hardware stack levels used: 1
  2930 ;; This function calls:
  2931 ;;		Nothing
  2932 ;; This function is called by:
  2933 ;;		_main
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937     0F97                     _duty_send:	
  2938                           ;psect for function _duty_send
  2939                           
  2940                           
  2941                           ;MEK303-PROJECT.c: 151: CCP1X= deger & 2 ;
  2942                           
  2943                           ;incstack = 0
  2944                           ; Regs used in _duty_send: [wreg]
  2945     0F97  1297               	bcf	23,5	;volatile
  2946                           
  2947                           ;MEK303-PROJECT.c: 152: CCP1Y = deger & 1;
  2948     0F98  1C57               	btfss	duty_send@deger,0
  2949     0F99  2F9E               	goto	u2010
  2950     0F9A  1283               	bcf	3,5	;RP0=0, select bank0
  2951     0F9B  1303               	bcf	3,6	;RP1=0, select bank0
  2952     0F9C  1617               	bsf	23,4	;volatile
  2953     0F9D  2FA1               	goto	l1688
  2954     0F9E                     u2010:
  2955     0F9E  1283               	bcf	3,5	;RP0=0, select bank0
  2956     0F9F  1303               	bcf	3,6	;RP1=0, select bank0
  2957     0FA0  1217               	bcf	23,4	;volatile
  2958     0FA1                     l1688:
  2959                           
  2960                           ;MEK303-PROJECT.c: 153: CCPR1L= deger >>2 ;
  2961     0FA1  0858               	movf	duty_send@deger+1,w
  2962     0FA2  00DA               	movwf	??_duty_send+1
  2963     0FA3  0857               	movf	duty_send@deger,w
  2964     0FA4  00D9               	movwf	??_duty_send
  2965     0FA5  0D5A               	rlf	??_duty_send+1,w
  2966     0FA6  0CDA               	rrf	??_duty_send+1,f
  2967     0FA7  0CD9               	rrf	??_duty_send,f
  2968     0FA8  0D5A               	rlf	??_duty_send+1,w
  2969     0FA9  0CDA               	rrf	??_duty_send+1,f
  2970     0FAA  0CD9               	rrf	??_duty_send,f
  2971     0FAB  0859               	movf	??_duty_send,w
  2972     0FAC  0095               	movwf	21	;volatile
  2973     0FAD  0008               	return
  2974     0FAE                     __end_of_duty_send:
  2975                           
  2976                           	psect	text11
  2977     0FC6                     __ptext11:	
  2978 ;; *************** function ___awtoft *****************
  2979 ;; Defined at:
  2980 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\awtoft.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;  c               2    8[COMMON] int 
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;  sign            1   11[COMMON] unsigned char 
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  3    8[COMMON] float 
  2987 ;; Registers used:
  2988 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2989 ;; Tracked objects:
  2990 ;;		On entry : 300/0
  2991 ;;		On exit  : 300/0
  2992 ;;		Unchanged: 300/0
  2993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2994 ;;      Params:         3       0       0       0       0
  2995 ;;      Locals:         1       0       0       0       0
  2996 ;;      Temps:          0       0       0       0       0
  2997 ;;      Totals:         4       0       0       0       0
  2998 ;;Total ram usage:        4 bytes
  2999 ;; Hardware stack levels used: 1
  3000 ;; Hardware stack levels required when called: 1
  3001 ;; This function calls:
  3002 ;;		___ftpack
  3003 ;; This function is called by:
  3004 ;;		_main
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008     0FC6                     ___awtoft:	
  3009                           ;psect for function ___awtoft
  3010                           
  3011                           
  3012                           ;incstack = 0
  3013                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3014     0FC6  01FB               	clrf	___awtoft@sign
  3015     0FC7  1FF9               	btfss	___awtoft@c+1,7
  3016     0FC8  2FD0               	goto	l1758
  3017     0FC9  09F8               	comf	___awtoft@c,f
  3018     0FCA  09F9               	comf	___awtoft@c+1,f
  3019     0FCB  0AF8               	incf	___awtoft@c,f
  3020     0FCC  1903               	skipnz
  3021     0FCD  0AF9               	incf	___awtoft@c+1,f
  3022     0FCE  01FB               	clrf	___awtoft@sign
  3023     0FCF  0AFB               	incf	___awtoft@sign,f
  3024     0FD0                     l1758:
  3025     0FD0  0878               	movf	___awtoft@c,w
  3026     0FD1  00F0               	movwf	___ftpack@arg
  3027     0FD2  0879               	movf	___awtoft@c+1,w
  3028     0FD3  00F1               	movwf	___ftpack@arg+1
  3029     0FD4  01F2               	clrf	___ftpack@arg+2
  3030     0FD5  308E               	movlw	142
  3031     0FD6  00F3               	movwf	___ftpack@exp
  3032     0FD7  087B               	movf	___awtoft@sign,w
  3033     0FD8  00F4               	movwf	___ftpack@sign
  3034     0FD9  120A  118A  21BC   	fcall	___ftpack
  3035     0FDC  0870               	movf	?___ftpack,w
  3036     0FDD  00F8               	movwf	?___awtoft
  3037     0FDE  0871               	movf	?___ftpack+1,w
  3038     0FDF  00F9               	movwf	?___awtoft+1
  3039     0FE0  0872               	movf	?___ftpack+2,w
  3040     0FE1  00FA               	movwf	?___awtoft+2
  3041     0FE2  0008               	return
  3042     0FE3                     __end_of___awtoft:
  3043                           
  3044                           	psect	text12
  3045     01BC                     __ptext12:	
  3046 ;; *************** function ___ftpack *****************
  3047 ;; Defined at:
  3048 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\float.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;  arg             3    0[COMMON] unsigned um
  3051 ;;  exp             1    3[COMMON] unsigned char 
  3052 ;;  sign            1    4[COMMON] unsigned char 
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;		None
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  3    0[COMMON] float 
  3057 ;; Registers used:
  3058 ;;		wreg, status,2, status,0, btemp+1
  3059 ;; Tracked objects:
  3060 ;;		On entry : 300/0
  3061 ;;		On exit  : 300/0
  3062 ;;		Unchanged: 300/0
  3063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3064 ;;      Params:         5       0       0       0       0
  3065 ;;      Locals:         0       0       0       0       0
  3066 ;;      Temps:          3       0       0       0       0
  3067 ;;      Totals:         8       0       0       0       0
  3068 ;;Total ram usage:        8 bytes
  3069 ;; Hardware stack levels used: 1
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		___awtoft
  3074 ;;		___ftadd
  3075 ;;		___ftdiv
  3076 ;;		___ftmul
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080     01BC                     ___ftpack:	
  3081                           ;psect for function ___ftpack
  3082                           
  3083                           
  3084                           ;incstack = 0
  3085                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  3086     01BC  0873               	movf	___ftpack@exp,w
  3087     01BD  1903               	btfsc	3,2
  3088     01BE  29C4               	goto	l1294
  3089     01BF  0872               	movf	___ftpack@arg+2,w
  3090     01C0  0471               	iorwf	___ftpack@arg+1,w
  3091     01C1  0470               	iorwf	___ftpack@arg,w
  3092     01C2  1D03               	skipz
  3093     01C3  29D7               	goto	l1302
  3094     01C4                     l1294:
  3095     01C4  3000               	movlw	0
  3096     01C5  00F0               	movwf	?___ftpack
  3097     01C6  3000               	movlw	0
  3098     01C7  00F1               	movwf	?___ftpack+1
  3099     01C8  3000               	movlw	0
  3100     01C9  00F2               	movwf	?___ftpack+2
  3101     01CA  0008               	return
  3102     01CB                     l1298:
  3103     01CB  3001               	movlw	1
  3104     01CC  00FF               	movwf	127
  3105     01CD  087F               	movf	127,w
  3106     01CE  07F3               	addwf	___ftpack@exp,f
  3107     01CF  3001               	movlw	1
  3108     01D0                     u1135:
  3109     01D0  1003               	clrc
  3110     01D1  0CF2               	rrf	___ftpack@arg+2,f
  3111     01D2  0CF1               	rrf	___ftpack@arg+1,f
  3112     01D3  0CF0               	rrf	___ftpack@arg,f
  3113     01D4  3EFF               	addlw	-1
  3114     01D5  1D03               	skipz
  3115     01D6  29D0               	goto	u1135
  3116     01D7                     l1302:
  3117     01D7  30FE               	movlw	254
  3118     01D8  0572               	andwf	___ftpack@arg+2,w
  3119     01D9  1903               	btfsc	3,2
  3120     01DA  29F2               	goto	l1310
  3121     01DB  29CB               	goto	l1298
  3122     01DC                     l1304:
  3123     01DC  3001               	movlw	1
  3124     01DD  00FF               	movwf	127
  3125     01DE  087F               	movf	127,w
  3126     01DF  07F3               	addwf	___ftpack@exp,f
  3127     01E0  3001               	movlw	1
  3128     01E1  07F0               	addwf	___ftpack@arg,f
  3129     01E2  3000               	movlw	0
  3130     01E3  1803               	skipnc
  3131     01E4  3001               	movlw	1
  3132     01E5  07F1               	addwf	___ftpack@arg+1,f
  3133     01E6  3000               	movlw	0
  3134     01E7  1803               	skipnc
  3135     01E8  3001               	movlw	1
  3136     01E9  07F2               	addwf	___ftpack@arg+2,f
  3137     01EA  3001               	movlw	1
  3138     01EB                     u1155:
  3139     01EB  1003               	clrc
  3140     01EC  0CF2               	rrf	___ftpack@arg+2,f
  3141     01ED  0CF1               	rrf	___ftpack@arg+1,f
  3142     01EE  0CF0               	rrf	___ftpack@arg,f
  3143     01EF  3EFF               	addlw	-1
  3144     01F0  1D03               	skipz
  3145     01F1  29EB               	goto	u1155
  3146     01F2                     l1310:
  3147     01F2  30FF               	movlw	255
  3148     01F3  0572               	andwf	___ftpack@arg+2,w
  3149     01F4  1903               	btfsc	3,2
  3150     01F5  2A05               	goto	l1314
  3151     01F6  29DC               	goto	l1304
  3152     01F7                     l1316:
  3153     01F7  3002               	movlw	2
  3154     01F8  0273               	subwf	___ftpack@exp,w
  3155     01F9  1C03               	btfss	3,0
  3156     01FA  2A07               	goto	l456
  3157     01FB  3001               	movlw	1
  3158     01FC  02F3               	subwf	___ftpack@exp,f
  3159     01FD  3001               	movlw	1
  3160     01FE                     u1175:
  3161     01FE  1003               	clrc
  3162     01FF  0DF0               	rlf	___ftpack@arg,f
  3163     0200  0DF1               	rlf	___ftpack@arg+1,f
  3164     0201  0DF2               	rlf	___ftpack@arg+2,f
  3165     0202  3EFF               	addlw	-1
  3166     0203  1D03               	skipz
  3167     0204  29FE               	goto	u1175
  3168     0205                     l1314:
  3169     0205  1FF1               	btfss	___ftpack@arg+1,7
  3170     0206  29F7               	goto	l1316
  3171     0207                     l456:
  3172     0207  1873               	btfsc	___ftpack@exp,0
  3173     0208  2A0F               	goto	l457
  3174     0209  30FF               	movlw	255
  3175     020A  05F0               	andwf	___ftpack@arg,f
  3176     020B  307F               	movlw	127
  3177     020C  05F1               	andwf	___ftpack@arg+1,f
  3178     020D  30FF               	movlw	255
  3179     020E  05F2               	andwf	___ftpack@arg+2,f
  3180     020F                     l457:
  3181     020F  1003               	clrc
  3182     0210  0CF3               	rrf	___ftpack@exp,f
  3183     0211  0873               	movf	___ftpack@exp,w
  3184     0212  00F5               	movwf	??___ftpack
  3185     0213  01F6               	clrf	??___ftpack+1
  3186     0214  01F7               	clrf	??___ftpack+2
  3187     0215  3010               	movlw	16
  3188     0216                     u1215:
  3189     0216  1003               	clrc
  3190     0217  0DF5               	rlf	??___ftpack,f
  3191     0218  0DF6               	rlf	??___ftpack+1,f
  3192     0219  0DF7               	rlf	??___ftpack+2,f
  3193     021A  3EFF               	addlw	-1
  3194     021B  1D03               	skipz
  3195     021C  2A16               	goto	u1215
  3196     021D  0875               	movf	??___ftpack,w
  3197     021E  04F0               	iorwf	___ftpack@arg,f
  3198     021F  0876               	movf	??___ftpack+1,w
  3199     0220  04F1               	iorwf	___ftpack@arg+1,f
  3200     0221  0877               	movf	??___ftpack+2,w
  3201     0222  04F2               	iorwf	___ftpack@arg+2,f
  3202     0223  0874               	movf	___ftpack@sign,w
  3203     0224  1903               	btfsc	3,2
  3204     0225  0008               	return
  3205     0226  17F2               	bsf	___ftpack@arg+2,7
  3206     0227  0008               	return
  3207     0228                     __end_of___ftpack:
  3208                           
  3209                           	psect	text13
  3210     00E6                     __ptext13:	
  3211 ;; *************** function _Lcd_Write_String *****************
  3212 ;; Defined at:
  3213 ;;		line 137 in file "MEK303-PROJECT.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  a               2    5[COMMON] PTR unsigned char 
  3216 ;;		 -> STR_9(9), STR_8(7), STR_6(9), STR_5(9), 
  3217 ;;		 -> STR_4(7), main@char_digital(15), STR_2(11), STR_1(15), 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  i               2   10[COMMON] int 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 200/100
  3226 ;;		On exit  : 300/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3229 ;;      Params:         2       0       0       0       0
  3230 ;;      Locals:         2       0       0       0       0
  3231 ;;      Temps:          3       0       0       0       0
  3232 ;;      Totals:         7       0       0       0       0
  3233 ;;Total ram usage:        7 bytes
  3234 ;; Hardware stack levels used: 1
  3235 ;; Hardware stack levels required when called: 2
  3236 ;; This function calls:
  3237 ;;		_Lcd_Write_Char
  3238 ;; This function is called by:
  3239 ;;		_main
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243     00E6                     _Lcd_Write_String:	
  3244                           ;psect for function _Lcd_Write_String
  3245                           
  3246                           
  3247                           ;MEK303-PROJECT.c: 139: int i;;MEK303-PROJECT.c: 140: for(i=0;a[i]!='\0';i++)
  3248                           
  3249                           ;incstack = 0
  3250                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3251     00E6  01FA               	clrf	Lcd_Write_String@i
  3252     00E7  01FB               	clrf	Lcd_Write_String@i+1
  3253     00E8                     l1680:
  3254     00E8  087A               	movf	Lcd_Write_String@i,w
  3255     00E9  0775               	addwf	Lcd_Write_String@a,w
  3256     00EA  00F8               	movwf	??_Lcd_Write_String+1
  3257     00EB  0876               	movf	Lcd_Write_String@a+1,w
  3258     00EC  00F7               	movwf	??_Lcd_Write_String
  3259     00ED  1803               	skipnc
  3260     00EE  0AF7               	incf	??_Lcd_Write_String,f
  3261     00EF  1BFA               	btfsc	Lcd_Write_String@i,7
  3262     00F0  03F7               	decf	??_Lcd_Write_String,f
  3263     00F1  0877               	movf	??_Lcd_Write_String,w
  3264     00F2  00F9               	movwf	??_Lcd_Write_String+2
  3265     00F3  0879               	movf	??_Lcd_Write_String+2,w
  3266     00F4  1283               	bcf	3,5	;RP0=0, select bank0
  3267     00F5  1303               	bcf	3,6	;RP1=0, select bank0
  3268     00F6  00FF               	movwf	127
  3269     00F7  0878               	movf	??_Lcd_Write_String+1,w
  3270     00F8  0084               	movwf	4
  3271     00F9  120A  118A  2003  120A  118A  	fcall	stringtab
  3272     00FE  3A00               	xorlw	0
  3273     00FF  1903               	btfsc	3,2
  3274     0100  0008               	return
  3275                           
  3276                           ;MEK303-PROJECT.c: 141: Lcd_Write_Char(a[i]);
  3277     0101  087A               	movf	Lcd_Write_String@i,w
  3278     0102  0775               	addwf	Lcd_Write_String@a,w
  3279     0103  00F8               	movwf	??_Lcd_Write_String+1
  3280     0104  0876               	movf	Lcd_Write_String@a+1,w
  3281     0105  00F7               	movwf	??_Lcd_Write_String
  3282     0106  1803               	skipnc
  3283     0107  0AF7               	incf	??_Lcd_Write_String,f
  3284     0108  1BFA               	btfsc	Lcd_Write_String@i,7
  3285     0109  03F7               	decf	??_Lcd_Write_String,f
  3286     010A  0877               	movf	??_Lcd_Write_String,w
  3287     010B  00F9               	movwf	??_Lcd_Write_String+2
  3288     010C  0879               	movf	??_Lcd_Write_String+2,w
  3289     010D  1283               	bcf	3,5	;RP0=0, select bank0
  3290     010E  1303               	bcf	3,6	;RP1=0, select bank0
  3291     010F  00FF               	movwf	127
  3292     0110  0878               	movf	??_Lcd_Write_String+1,w
  3293     0111  0084               	movwf	4
  3294     0112  120A  118A  2003  120A  118A  	fcall	stringtab
  3295     0117  120A  118A  204B  120A  118A  	fcall	_Lcd_Write_Char
  3296     011C  3001               	movlw	1
  3297     011D  07FA               	addwf	Lcd_Write_String@i,f
  3298     011E  1803               	skipnc
  3299     011F  0AFB               	incf	Lcd_Write_String@i+1,f
  3300     0120  3000               	movlw	0
  3301     0121  07FB               	addwf	Lcd_Write_String@i+1,f
  3302     0122  28E8               	goto	l1680
  3303     0123                     __end_of_Lcd_Write_String:
  3304                           
  3305                           	psect	text14
  3306     004B                     __ptext14:	
  3307 ;; *************** function _Lcd_Write_Char *****************
  3308 ;; Defined at:
  3309 ;;		line 121 in file "MEK303-PROJECT.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  a               1    wreg     unsigned char 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  a               1    4[COMMON] unsigned char 
  3314 ;;  y               1    3[COMMON] unsigned char 
  3315 ;;  temp            1    2[COMMON] unsigned char 
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0, pclath, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 300/0
  3322 ;;		On exit  : 300/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3325 ;;      Params:         0       0       0       0       0
  3326 ;;      Locals:         3       0       0       0       0
  3327 ;;      Temps:          1       0       0       0       0
  3328 ;;      Totals:         4       0       0       0       0
  3329 ;;Total ram usage:        4 bytes
  3330 ;; Hardware stack levels used: 1
  3331 ;; Hardware stack levels required when called: 1
  3332 ;; This function calls:
  3333 ;;		_Lcd_Port
  3334 ;; This function is called by:
  3335 ;;		_Lcd_Write_String
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339     004B                     _Lcd_Write_Char:	
  3340                           ;psect for function _Lcd_Write_Char
  3341                           
  3342                           
  3343                           ;incstack = 0
  3344                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3345                           ;Lcd_Write_Char@a stored from wreg
  3346     004B  00F4               	movwf	Lcd_Write_Char@a
  3347                           
  3348                           ;MEK303-PROJECT.c: 123: char temp,y;;MEK303-PROJECT.c: 124: temp = a&0x0F;
  3349     004C  0874               	movf	Lcd_Write_Char@a,w
  3350     004D  390F               	andlw	15
  3351     004E  00F2               	movwf	Lcd_Write_Char@temp
  3352                           
  3353                           ;MEK303-PROJECT.c: 125: y = a&0xF0;
  3354     004F  0874               	movf	Lcd_Write_Char@a,w
  3355     0050  39F0               	andlw	240
  3356     0051  00F3               	movwf	Lcd_Write_Char@y
  3357                           
  3358                           ;MEK303-PROJECT.c: 126: RB0 = 1;
  3359     0052  1406               	bsf	6,0	;volatile
  3360                           
  3361                           ;MEK303-PROJECT.c: 127: Lcd_Port(y>>4);
  3362     0053  0873               	movf	Lcd_Write_Char@y,w
  3363     0054  00F1               	movwf	??_Lcd_Write_Char
  3364     0055  3004               	movlw	4
  3365     0056                     u1515:
  3366     0056  1003               	clrc
  3367     0057  0CF1               	rrf	??_Lcd_Write_Char,f
  3368     0058  3EFF               	addlw	-1
  3369     0059  1D03               	skipz
  3370     005A  2856               	goto	u1515
  3371     005B  0871               	movf	??_Lcd_Write_Char,w
  3372     005C  120A  158A  2781  120A  118A  	fcall	_Lcd_Port
  3373                           
  3374                           ;MEK303-PROJECT.c: 128: RB2 = 1;
  3375     0061  1506               	bsf	6,2	;volatile
  3376                           
  3377                           ;MEK303-PROJECT.c: 129: _delay((unsigned long)((40)*(4000000/4000000.0)));
  3378     0062  300D               	movlw	13
  3379     0063  00F1               	movwf	??_Lcd_Write_Char
  3380     0064                     u2227:
  3381     0064  0BF1               	decfsz	??_Lcd_Write_Char,f
  3382     0065  2864               	goto	u2227
  3383                           
  3384                           ;MEK303-PROJECT.c: 130: RB2 = 0;
  3385     0066  1283               	bcf	3,5	;RP0=0, select bank0
  3386     0067  1303               	bcf	3,6	;RP1=0, select bank0
  3387     0068  1106               	bcf	6,2	;volatile
  3388                           
  3389                           ;MEK303-PROJECT.c: 131: Lcd_Port(temp);
  3390     0069  0872               	movf	Lcd_Write_Char@temp,w
  3391     006A  120A  158A  2781  120A  118A  	fcall	_Lcd_Port
  3392                           
  3393                           ;MEK303-PROJECT.c: 132: RB2 = 1;
  3394     006F  1506               	bsf	6,2	;volatile
  3395                           
  3396                           ;MEK303-PROJECT.c: 133: _delay((unsigned long)((40)*(4000000/4000000.0)));
  3397     0070  300D               	movlw	13
  3398     0071  00F1               	movwf	??_Lcd_Write_Char
  3399     0072                     u2237:
  3400     0072  0BF1               	decfsz	??_Lcd_Write_Char,f
  3401     0073  2872               	goto	u2237
  3402                           
  3403                           ;MEK303-PROJECT.c: 134: RB2 = 0;
  3404     0074  1283               	bcf	3,5	;RP0=0, select bank0
  3405     0075  1303               	bcf	3,6	;RP1=0, select bank0
  3406     0076  1106               	bcf	6,2	;volatile
  3407     0077  0008               	return
  3408     0078                     __end_of_Lcd_Write_Char:
  3409                           
  3410                           	psect	text15
  3411     0123                     __ptext15:	
  3412 ;; *************** function _Lcd_Set_Cursor *****************
  3413 ;; Defined at:
  3414 ;;		line 82 in file "MEK303-PROJECT.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  a               1    wreg     unsigned char 
  3417 ;;  b               1    4[COMMON] unsigned char 
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;  a               1    6[COMMON] unsigned char 
  3420 ;;  temp            1    9[COMMON] unsigned char 
  3421 ;;  y               1    8[COMMON] unsigned char 
  3422 ;;  z               1    7[COMMON] unsigned char 
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  1    wreg      void 
  3425 ;; Registers used:
  3426 ;;		wreg, status,2, status,0, pclath, cstack
  3427 ;; Tracked objects:
  3428 ;;		On entry : 200/100
  3429 ;;		On exit  : 200/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3432 ;;      Params:         1       0       0       0       0
  3433 ;;      Locals:         4       0       0       0       0
  3434 ;;      Temps:          1       0       0       0       0
  3435 ;;      Totals:         6       0       0       0       0
  3436 ;;Total ram usage:        6 bytes
  3437 ;; Hardware stack levels used: 1
  3438 ;; Hardware stack levels required when called: 2
  3439 ;; This function calls:
  3440 ;;		_Lcd_Cmd
  3441 ;; This function is called by:
  3442 ;;		_main
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446     0123                     _Lcd_Set_Cursor:	
  3447                           ;psect for function _Lcd_Set_Cursor
  3448                           
  3449                           
  3450                           ;incstack = 0
  3451                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3452                           ;Lcd_Set_Cursor@a stored from wreg
  3453     0123  00F6               	movwf	Lcd_Set_Cursor@a
  3454                           
  3455                           ;MEK303-PROJECT.c: 84: char temp,z,y;;MEK303-PROJECT.c: 85: if(a == 1)
  3456     0124  0376               	decf	Lcd_Set_Cursor@a,w
  3457     0125  1D03               	btfss	3,2
  3458     0126  2942               	goto	l1654
  3459                           
  3460                           ;MEK303-PROJECT.c: 86: {;MEK303-PROJECT.c: 87: temp = 0x80 + b - 1;
  3461     0127  0874               	movf	Lcd_Set_Cursor@b,w
  3462     0128  3E7F               	addlw	127
  3463     0129  00F9               	movwf	Lcd_Set_Cursor@temp
  3464                           
  3465                           ;MEK303-PROJECT.c: 88: z = temp>>4;
  3466     012A  0879               	movf	Lcd_Set_Cursor@temp,w
  3467     012B  00F5               	movwf	??_Lcd_Set_Cursor
  3468     012C  3004               	movlw	4
  3469     012D                     u1955:
  3470     012D  1003               	clrc
  3471     012E  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3472     012F  3EFF               	addlw	-1
  3473     0130  1D03               	skipz
  3474     0131  292D               	goto	u1955
  3475     0132  0875               	movf	??_Lcd_Set_Cursor,w
  3476     0133  00F7               	movwf	Lcd_Set_Cursor@z
  3477                           
  3478                           ;MEK303-PROJECT.c: 89: y = temp & 0x0F;
  3479     0134  0879               	movf	Lcd_Set_Cursor@temp,w
  3480     0135  390F               	andlw	15
  3481     0136  00F8               	movwf	Lcd_Set_Cursor@y
  3482                           
  3483                           ;MEK303-PROJECT.c: 90: Lcd_Cmd(z);
  3484     0137  0877               	movf	Lcd_Set_Cursor@z,w
  3485     0138  120A  158A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3486                           
  3487                           ;MEK303-PROJECT.c: 91: Lcd_Cmd(y);
  3488     013D  0878               	movf	Lcd_Set_Cursor@y,w
  3489     013E  120A  158A  27AE   	fcall	_Lcd_Cmd
  3490                           
  3491                           ;MEK303-PROJECT.c: 92: }
  3492     0141  0008               	return
  3493     0142                     l1654:
  3494                           
  3495                           ;MEK303-PROJECT.c: 93: else if(a == 2)
  3496     0142  3002               	movlw	2
  3497     0143  0676               	xorwf	Lcd_Set_Cursor@a,w
  3498     0144  1D03               	btfss	3,2
  3499     0145  0008               	return
  3500                           
  3501                           ;MEK303-PROJECT.c: 94: {;MEK303-PROJECT.c: 95: temp = 0xC0 + b - 1;
  3502     0146  0874               	movf	Lcd_Set_Cursor@b,w
  3503     0147  3EBF               	addlw	191
  3504     0148  00F9               	movwf	Lcd_Set_Cursor@temp
  3505                           
  3506                           ;MEK303-PROJECT.c: 96: z = temp>>4;
  3507     0149  0879               	movf	Lcd_Set_Cursor@temp,w
  3508     014A  00F5               	movwf	??_Lcd_Set_Cursor
  3509     014B  3004               	movlw	4
  3510     014C                     u1975:
  3511     014C  1003               	clrc
  3512     014D  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3513     014E  3EFF               	addlw	-1
  3514     014F  1D03               	skipz
  3515     0150  294C               	goto	u1975
  3516     0151  0875               	movf	??_Lcd_Set_Cursor,w
  3517     0152  00F7               	movwf	Lcd_Set_Cursor@z
  3518                           
  3519                           ;MEK303-PROJECT.c: 97: y = temp & 0x0F;
  3520     0153  0879               	movf	Lcd_Set_Cursor@temp,w
  3521     0154  390F               	andlw	15
  3522     0155  00F8               	movwf	Lcd_Set_Cursor@y
  3523                           
  3524                           ;MEK303-PROJECT.c: 98: Lcd_Cmd(z);
  3525     0156  0877               	movf	Lcd_Set_Cursor@z,w
  3526     0157  120A  158A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3527                           
  3528                           ;MEK303-PROJECT.c: 99: Lcd_Cmd(y);
  3529     015C  0878               	movf	Lcd_Set_Cursor@y,w
  3530     015D  120A  158A  27AE   	fcall	_Lcd_Cmd
  3531     0160  0008               	return
  3532     0161                     __end_of_Lcd_Set_Cursor:
  3533                           
  3534                           	psect	text16
  3535     0161                     __ptext16:	
  3536 ;; *************** function _Lcd_Init *****************
  3537 ;; Defined at:
  3538 ;;		line 103 in file "MEK303-PROJECT.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;		None
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;		None
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      void 
  3545 ;; Registers used:
  3546 ;;		wreg, status,2, status,0, pclath, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : B00/0
  3549 ;;		On exit  : 300/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3552 ;;      Params:         0       0       0       0       0
  3553 ;;      Locals:         0       0       0       0       0
  3554 ;;      Temps:          2       0       0       0       0
  3555 ;;      Totals:         2       0       0       0       0
  3556 ;;Total ram usage:        2 bytes
  3557 ;; Hardware stack levels used: 1
  3558 ;; Hardware stack levels required when called: 2
  3559 ;; This function calls:
  3560 ;;		_Lcd_Cmd
  3561 ;;		_Lcd_Port
  3562 ;; This function is called by:
  3563 ;;		_main
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567     0161                     _Lcd_Init:	
  3568                           ;psect for function _Lcd_Init
  3569                           
  3570                           
  3571                           ;MEK303-PROJECT.c: 105: Lcd_Port(0x00);
  3572                           
  3573                           ;incstack = 0
  3574                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3575     0161  3000               	movlw	0
  3576     0162  120A  158A  2781  120A  118A  	fcall	_Lcd_Port
  3577                           
  3578                           ;MEK303-PROJECT.c: 106: _delay((unsigned long)((20)*(4000000/4000.0)));
  3579     0167  301A               	movlw	26
  3580     0168  00F5               	movwf	??_Lcd_Init+1
  3581     0169  30F8               	movlw	248
  3582     016A  00F4               	movwf	??_Lcd_Init
  3583     016B                     u2247:
  3584     016B  0BF4               	decfsz	??_Lcd_Init,f
  3585     016C  296B               	goto	u2247
  3586     016D  0BF5               	decfsz	??_Lcd_Init+1,f
  3587     016E  296B               	goto	u2247
  3588     016F  0000               	nop
  3589                           
  3590                           ;MEK303-PROJECT.c: 107: Lcd_Cmd(0x03);
  3591     0170  3003               	movlw	3
  3592     0171  120A  158A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3593                           
  3594                           ;MEK303-PROJECT.c: 108: _delay((unsigned long)((5)*(4000000/4000.0)));
  3595     0176  3007               	movlw	7
  3596     0177  00F5               	movwf	??_Lcd_Init+1
  3597     0178  307D               	movlw	125
  3598     0179  00F4               	movwf	??_Lcd_Init
  3599     017A                     u2257:
  3600     017A  0BF4               	decfsz	??_Lcd_Init,f
  3601     017B  297A               	goto	u2257
  3602     017C  0BF5               	decfsz	??_Lcd_Init+1,f
  3603     017D  297A               	goto	u2257
  3604                           
  3605                           ;MEK303-PROJECT.c: 109: Lcd_Cmd(0x03);
  3606     017E  3003               	movlw	3
  3607     017F  120A  158A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3608                           
  3609                           ;MEK303-PROJECT.c: 110: _delay((unsigned long)((11)*(4000000/4000.0)));
  3610     0184  300F               	movlw	15
  3611     0185  00F5               	movwf	??_Lcd_Init+1
  3612     0186  3047               	movlw	71
  3613     0187  00F4               	movwf	??_Lcd_Init
  3614     0188                     u2267:
  3615     0188  0BF4               	decfsz	??_Lcd_Init,f
  3616     0189  2988               	goto	u2267
  3617     018A  0BF5               	decfsz	??_Lcd_Init+1,f
  3618     018B  2988               	goto	u2267
  3619     018C  298D               	nop2
  3620                           
  3621                           ;MEK303-PROJECT.c: 111: Lcd_Cmd(0x03);
  3622     018D  3003               	movlw	3
  3623     018E  120A  158A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3624                           
  3625                           ;MEK303-PROJECT.c: 112: Lcd_Cmd(0x02);
  3626     0193  3002               	movlw	2
  3627     0194  120A  158A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3628                           
  3629                           ;MEK303-PROJECT.c: 113: Lcd_Cmd(0x02);
  3630     0199  3002               	movlw	2
  3631     019A  120A  158A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3632                           
  3633                           ;MEK303-PROJECT.c: 114: Lcd_Cmd(0x08);
  3634     019F  3008               	movlw	8
  3635     01A0  120A  158A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3636                           
  3637                           ;MEK303-PROJECT.c: 115: Lcd_Cmd(0x00);
  3638     01A5  3000               	movlw	0
  3639     01A6  120A  158A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3640                           
  3641                           ;MEK303-PROJECT.c: 116: Lcd_Cmd(0x0C);
  3642     01AB  300C               	movlw	12
  3643     01AC  120A  158A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3644                           
  3645                           ;MEK303-PROJECT.c: 117: Lcd_Cmd(0x00);
  3646     01B1  3000               	movlw	0
  3647     01B2  120A  158A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3648                           
  3649                           ;MEK303-PROJECT.c: 118: Lcd_Cmd(0x06);
  3650     01B7  3006               	movlw	6
  3651     01B8  120A  158A  27AE   	fcall	_Lcd_Cmd
  3652     01BB  0008               	return
  3653     01BC                     __end_of_Lcd_Init:
  3654                           
  3655                           	psect	text17
  3656     0F76                     __ptext17:	
  3657 ;; *************** function _Lcd_Clear *****************
  3658 ;; Defined at:
  3659 ;;		line 76 in file "MEK303-PROJECT.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;		None
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;		None
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      void 
  3666 ;; Registers used:
  3667 ;;		wreg, status,2, status,0, pclath, cstack
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 300/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3673 ;;      Params:         0       0       0       0       0
  3674 ;;      Locals:         0       0       0       0       0
  3675 ;;      Temps:          0       0       0       0       0
  3676 ;;      Totals:         0       0       0       0       0
  3677 ;;Total ram usage:        0 bytes
  3678 ;; Hardware stack levels used: 1
  3679 ;; Hardware stack levels required when called: 2
  3680 ;; This function calls:
  3681 ;;		_Lcd_Cmd
  3682 ;; This function is called by:
  3683 ;;		_main
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687     0F76                     _Lcd_Clear:	
  3688                           ;psect for function _Lcd_Clear
  3689                           
  3690                           
  3691                           ;MEK303-PROJECT.c: 78: Lcd_Cmd(0);
  3692                           
  3693                           ;incstack = 0
  3694                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3695     0F76  3000               	movlw	0
  3696     0F77  120A  158A  27AE  120A  158A  	fcall	_Lcd_Cmd
  3697                           
  3698                           ;MEK303-PROJECT.c: 79: Lcd_Cmd(1);
  3699     0F7C  3001               	movlw	1
  3700     0F7D  120A  158A  27AE   	fcall	_Lcd_Cmd
  3701     0F80  0008               	return
  3702     0F81                     __end_of_Lcd_Clear:
  3703                           
  3704                           	psect	text18
  3705     0FAE                     __ptext18:	
  3706 ;; *************** function _Lcd_Cmd *****************
  3707 ;; Defined at:
  3708 ;;		line 67 in file "MEK303-PROJECT.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;  a               1    wreg     unsigned char 
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;  a               1    3[COMMON] unsigned char 
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  1    wreg      void 
  3715 ;; Registers used:
  3716 ;;		wreg, status,2, status,0, pclath, cstack
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/100
  3719 ;;		On exit  : 300/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3722 ;;      Params:         0       0       0       0       0
  3723 ;;      Locals:         1       0       0       0       0
  3724 ;;      Temps:          2       0       0       0       0
  3725 ;;      Totals:         3       0       0       0       0
  3726 ;;Total ram usage:        3 bytes
  3727 ;; Hardware stack levels used: 1
  3728 ;; Hardware stack levels required when called: 1
  3729 ;; This function calls:
  3730 ;;		_Lcd_Port
  3731 ;; This function is called by:
  3732 ;;		_Lcd_Clear
  3733 ;;		_Lcd_Set_Cursor
  3734 ;;		_Lcd_Init
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738     0FAE                     _Lcd_Cmd:	
  3739                           ;psect for function _Lcd_Cmd
  3740                           
  3741                           
  3742                           ;incstack = 0
  3743                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3744                           ;Lcd_Cmd@a stored from wreg
  3745     0FAE  00F3               	movwf	Lcd_Cmd@a
  3746                           
  3747                           ;MEK303-PROJECT.c: 69: RB0 = 0;
  3748     0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  3749     0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  3750     0FB1  1006               	bcf	6,0	;volatile
  3751                           
  3752                           ;MEK303-PROJECT.c: 70: Lcd_Port(a);
  3753     0FB2  0873               	movf	Lcd_Cmd@a,w
  3754     0FB3  120A  158A  2781  120A  158A  	fcall	_Lcd_Port
  3755                           
  3756                           ;MEK303-PROJECT.c: 71: RB2 = 1;
  3757     0FB8  1506               	bsf	6,2	;volatile
  3758                           
  3759                           ;MEK303-PROJECT.c: 72: _delay((unsigned long)((4)*(4000000/4000.0)));
  3760     0FB9  3006               	movlw	6
  3761     0FBA  00F2               	movwf	??_Lcd_Cmd+1
  3762     0FBB  3030               	movlw	48
  3763     0FBC  00F1               	movwf	??_Lcd_Cmd
  3764     0FBD                     u2277:
  3765     0FBD  0BF1               	decfsz	??_Lcd_Cmd,f
  3766     0FBE  2FBD               	goto	u2277
  3767     0FBF  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3768     0FC0  2FBD               	goto	u2277
  3769     0FC1  0000               	nop
  3770                           
  3771                           ;MEK303-PROJECT.c: 73: RB2 = 0;
  3772     0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  3773     0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  3774     0FC4  1106               	bcf	6,2	;volatile
  3775     0FC5  0008               	return
  3776     0FC6                     __end_of_Lcd_Cmd:
  3777                           
  3778                           	psect	text19
  3779     0F81                     __ptext19:	
  3780 ;; *************** function _Lcd_Port *****************
  3781 ;; Defined at:
  3782 ;;		line 44 in file "MEK303-PROJECT.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  a               1    wreg     unsigned char 
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;  a               1    0[COMMON] unsigned char 
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      void 
  3789 ;; Registers used:
  3790 ;;		wreg
  3791 ;; Tracked objects:
  3792 ;;		On entry : 300/0
  3793 ;;		On exit  : 300/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3796 ;;      Params:         0       0       0       0       0
  3797 ;;      Locals:         1       0       0       0       0
  3798 ;;      Temps:          0       0       0       0       0
  3799 ;;      Totals:         1       0       0       0       0
  3800 ;;Total ram usage:        1 bytes
  3801 ;; Hardware stack levels used: 1
  3802 ;; This function calls:
  3803 ;;		Nothing
  3804 ;; This function is called by:
  3805 ;;		_Lcd_Cmd
  3806 ;;		_Lcd_Init
  3807 ;;		_Lcd_Write_Char
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811     0F81                     _Lcd_Port:	
  3812                           ;psect for function _Lcd_Port
  3813                           
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in _Lcd_Port: [wreg]
  3817                           ;Lcd_Port@a stored from wreg
  3818     0F81  00F0               	movwf	Lcd_Port@a
  3819                           
  3820                           ;MEK303-PROJECT.c: 46: if(a & 1)
  3821     0F82  1C70               	btfss	Lcd_Port@a,0
  3822     0F83  2F86               	goto	l59
  3823                           
  3824                           ;MEK303-PROJECT.c: 47: RD4 = 1;
  3825     0F84  1608               	bsf	8,4	;volatile
  3826     0F85  2F87               	goto	l60
  3827     0F86                     l59:
  3828                           
  3829                           ;MEK303-PROJECT.c: 48: else;MEK303-PROJECT.c: 49: RD4 = 0;
  3830     0F86  1208               	bcf	8,4	;volatile
  3831     0F87                     l60:
  3832                           
  3833                           ;MEK303-PROJECT.c: 51: if(a & 2)
  3834     0F87  1CF0               	btfss	Lcd_Port@a,1
  3835     0F88  2F8B               	goto	l61
  3836                           
  3837                           ;MEK303-PROJECT.c: 52: RD5 = 1;
  3838     0F89  1688               	bsf	8,5	;volatile
  3839     0F8A  2F8C               	goto	l62
  3840     0F8B                     l61:
  3841                           
  3842                           ;MEK303-PROJECT.c: 53: else;MEK303-PROJECT.c: 54: RD5 = 0;
  3843     0F8B  1288               	bcf	8,5	;volatile
  3844     0F8C                     l62:
  3845                           
  3846                           ;MEK303-PROJECT.c: 56: if(a & 4)
  3847     0F8C  1D70               	btfss	Lcd_Port@a,2
  3848     0F8D  2F90               	goto	l63
  3849                           
  3850                           ;MEK303-PROJECT.c: 57: RD6 = 1;
  3851     0F8E  1708               	bsf	8,6	;volatile
  3852     0F8F  2F91               	goto	l64
  3853     0F90                     l63:
  3854                           
  3855                           ;MEK303-PROJECT.c: 58: else;MEK303-PROJECT.c: 59: RD6 = 0;
  3856     0F90  1308               	bcf	8,6	;volatile
  3857     0F91                     l64:
  3858                           
  3859                           ;MEK303-PROJECT.c: 61: if(a & 8)
  3860     0F91  1DF0               	btfss	Lcd_Port@a,3
  3861     0F92  2F95               	goto	l65
  3862                           
  3863                           ;MEK303-PROJECT.c: 62: RD7 = 1;
  3864     0F93  1788               	bsf	8,7	;volatile
  3865     0F94  0008               	return
  3866     0F95                     l65:
  3867                           
  3868                           ;MEK303-PROJECT.c: 63: else;MEK303-PROJECT.c: 64: RD7 = 0;
  3869     0F95  1388               	bcf	8,7	;volatile
  3870     0F96  0008               	return
  3871     0F97                     __end_of_Lcd_Port:
  3872     007E                     btemp	set	126	;btemp
  3873     007E                     wtemp0	set	126
  3874                           
  3875                           	psect	config
  3876                           
  3877                           ;Config register CONFIG @ 0x2007
  3878                           ;	Oscillator Selection bits
  3879                           ;	FOSC = XT, XT oscillator
  3880                           ;	Watchdog Timer Enable bit
  3881                           ;	WDTE = OFF, WDT disabled
  3882                           ;	Power-up Timer Enable bit
  3883                           ;	PWRTE = OFF, PWRT disabled
  3884                           ;	Brown-out Reset Enable bit
  3885                           ;	BOREN = ON, BOR enabled
  3886                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3887                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  3888                           ;	Data EEPROM Memory Code Protection bit
  3889                           ;	CPD = OFF, Data EEPROM code protection off
  3890                           ;	Flash Program Memory Write Enable bits
  3891                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  3892                           ;	In-Circuit Debugger Mode bit
  3893                           ;	DEBUG = 0x1, unprogrammed default
  3894                           ;	Flash Program Memory Code Protection bit
  3895                           ;	CP = OFF, Code protection off
  3896     2007                     	org	8199
  3897     2007  3FF9               	dw	16377

Data Sizes:
    Strings     45
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     76      76
    BANK1            80     30      30
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 15
		 -> main@char_digital(BANK1[15]), STR_1(CODE[15]), STR_2(CODE[11]), STR_4(CODE[7]), 
		 -> STR_5(CODE[9]), STR_6(CODE[9]), STR_8(CODE[7]), STR_9(CODE[9]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_3(CODE[3]), STR_7(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 15
		 -> main@char_digital(BANK1[15]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _map->___ftadd
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___ftmul->___ftadd
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_map
    _map->___fttol
    ___fttol->___ftdiv
    ___ftsub->___ftadd
    ___ftmul->___ftsub
    ___ftdiv->___ftmul
    _duty_send->___fttol

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   20548
                                             73 BANK0      3     3      0
                                              0 BANK1     30    30      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           ___awtoft
                            ___ftmul
                            ___fttol
                          _duty_send
                                _map
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1170
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   12058
                                             55 BANK0     18     3     15
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     411
                                             42 BANK0     13     9      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftsub (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3384
                                              6 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    2999
                                              8 COMMON     6     0      6
                                              0 BANK0      6     6      0
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2487
                                             12 BANK0     15     9      6
                            ___ftadd (ARG)
                           ___ftpack
                            ___ftsub (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2335
                                             27 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                            ___ftsub (ARG)
 ---------------------------------------------------------------------------------
 (1) _duty_send                                            4     2      2     150
                                             55 BANK0      4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2091
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1947
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     745
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     751
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awtoft
     ___ftpack
   ___ftmul
     ___ftadd (ARG)
       ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftsub (ARG)
       ___ftadd
   ___fttol
     ___ftadd (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
       ___ftmul (ARG)
       ___ftpack (ARG)
       ___ftsub (ARG)
     ___ftmul (ARG)
     ___ftsub (ARG)
   _duty_send
     ___fttol (ARG)
   _map
     ___ftadd
     ___ftdiv
     ___ftmul
     ___ftsub
     ___fttol
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4C       5       95.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     1E      1E       7       37.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sun Dec 31 17:07:52 2023

                       pc 0002                        l60 0F87                        l61 0F8B  
                      l62 0F8C                        l63 0F90                        l64 0F91  
                      l65 0F95                        l59 0F86                        fsr 0004  
            ___ftadd@exp1 0025              ___ftadd@exp2 0024              ___ftadd@sign 0023  
                     l104 0670                       l114 0737                       l108 0735  
                     l109 0731                       l540 0279                       l456 0207  
                     l480 05A8                       l457 020F                       _RB0 0030  
                     _RB2 0032                       _RD4 0044                       _RD5 0045  
                     _RD6 0046                       _RD7 0047                       _PR2 0092  
                     _map 029F                       fsr0 0004                       indf 0000  
             main@digital 00B9              ___ftdiv@cntr 0044              ___ftdiv@sign 0049  
                    l1310 01F2                      l1302 01D7                      l1304 01DC  
                    l1314 0205                      l1316 01F7                      l1406 05EF  
                    l1342 052B                      l1520 03FC                      l1352 0541  
                    l1370 056E                      l1346 0532                      l1452 0341  
                    l1532 0422                      l1516 03EC                      l1364 0559  
                    l1612 00D6                      l1604 00B2                      l1294 01C4  
                    l1446 032D                      l1374 057A                      l1606 00C0  
                    l1630 008C                      l1472 0366                      l1528 0412  
                    l1392 05BA                      l1384 0598                      l1376 057F  
                    l1552 0235                      l1616 00E1                      l1720 0498  
                    l1704 047F                      l1298 01CB                      l1378 0583  
                    l1546 0FEA                      l1634 009A                      l1714 0496  
                    l1492 03B9                      l1396 05CC                      l1388 05A4  
                    l1556 023E                      l1628 007E                      l1812 066B  
                    l1654 0142                      l1478 0385                      l1590 0296  
                    l1574 0265                      l1638 00A5                      l1742 04C8  
                    l1734 04C6                      l1680 00E8                      l1728 04B9  
                    l1744 044D                      l1832 0702                      l1498 03CD  
                    l1586 0288                      l1578 0275                      l1746 0503  
                    l1758 0FD0                      l1870 0780                      l1688 0FA1  
                    l1880 07B7                      l1698 0469                      l1858 073E  
                    l1798 062A                      ?_map 0057                      STR_1 001D  
                    STR_2 002C                      STR_3 0047                      STR_4 0040  
                    STR_5 0037                      STR_6 0037                      STR_7 0047  
                    STR_8 0040                      STR_9 0037                      u2010 0F9E  
                    u1215 0216                      u1135 01D0                      u1155 01EB  
                    u1175 01FE                      u2055 04AF                      u2135 06F6  
                    u1425 0584                      u2217 0659                      u2227 0064  
                    u1515 0056                      u2237 0072                      u1365 055A  
                    u2247 016B                      u1455 0599                      u2257 017A  
                    u1545 0367                      u1625 03FD                      u2185 0748  
                    u2267 0188                      u1555 0378                      u1635 0405  
                    u1395 056F                      u2277 0FBD                      u1565 0386  
                    u1725 0245                      u1825 00B5               main@counter 00B5  
                    u1675 0423                      u1755 0266                      u1915 0092  
                    u1685 042B                      u1845 00C1                      u1925 009B  
                    u1855 00CD                      u1785 027E                      u1865 00D7  
                    u1955 012D                      u1975 014C                      u1895 0081  
                    _TMR2 0011         ?_Lcd_Write_String 0075                      _main 0603  
            ___ftpack@arg 0070              ___ftpack@exp 0073                      map@x 0057  
                    btemp 007E                      start 0000        ??_Lcd_Write_String 0077  
             main@voltage 00B2           __end_of_Lcd_Cmd 0FC6              ___ftmul@cntr 0039  
            ___ftmul@sign 003A              ___fttol@exp1 0056                     ??_map 007E  
            ___fttol@lval 0052                     ?_main 0070                     _CCP1X 00BD  
                   _CCP1Y 00BC           __end_of___ftadd 0603           __end_of___ftdiv 03A5  
         __end_of___ftmul 044A           __end_of___ftsub 1000           __end_of___fttol 029F  
                   _T2CON 0012           __end_of___lwdiv 00E6           __end_of___lwmod 00AA  
                   _PORTB 0006                     _PORTC 0007                     _PORTD 0008  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088             ___awtoft@sign 007B           __end_of_dpowers 001D  
           ___ftpack@sign 0074                     pclath 000A                     status 0003  
                   wtemp0 007E           __end_of_sprintf 0508          __end_of_Lcd_Init 01BC  
        __end_of_Lcd_Port 0F97          main@char_digital 00A0           __initialization 07FC  
            __end_of_main 07FC                    ??_main 0069             ___fttol@sign1 0051  
                  _ADRESH 001E                    _ADRESL 009E                    _CCPR1L 0015  
        __end_of___awtoft 0FE3          __end_of___ftpack 0228                 ??_Lcd_Cmd 0071  
               ??___ftadd 0020                 ??___ftdiv 0041                 ??___ftmul 0032  
               ??___ftsub 007E                 ??___fttol 004E                 ??___lwdiv 0074  
               ??___lwmod 007B     ___ftmul@f3_as_product 0036                 ??_sprintf 0023  
         Lcd_Set_Cursor@a 0076           Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078  
         Lcd_Set_Cursor@z 0077   __end_of__initialization 07FC                ___ftadd@f1 0078  
              ___ftadd@f2 007B         __end_of_Lcd_Clear 0F81                ___ftdiv@f1 003E  
              ___ftdiv@f2 003B                ___ftdiv@f3 0045                ___awtoft@c 0078  
              ___ftmul@f1 002C                ___ftmul@f2 002F                ___ftsub@f1 0029  
              ___ftsub@f2 0026                ___fttol@f1 004A            __pcstackCOMMON 0070  
          _Lcd_Set_Cursor 0123                 ?_Lcd_Init 0070                 ?_Lcd_Port 0070  
          duty_send@deger 0057                __pmaintext 0603                   _CCP1CON 0017  
               ?___awtoft 0078                 ?___ftpack 0070    __end_of_Lcd_Set_Cursor 0161  
              ??_Lcd_Init 0074                ??_Lcd_Port 0070                __stringtab 0003  
          _Lcd_Write_Char 004B                   _Lcd_Cmd 0FAE                   ___ftadd 0508  
                 ___ftdiv 0319                   ___ftmul 03A5                   ___ftsub 0FE3  
                 ___fttol 0228                   ___lwdiv 00AA                   _map$850 0066  
                 ___lwmod 0078                ??___awtoft 007B                ??___ftpack 0075  
         ?_Lcd_Set_Cursor 0074                   __ptext1 044A                   __ptext2 0078  
                 __ptext3 00AA                   __ptext4 029F                   __ptext5 0228  
                 __ptext6 0FE3                   __ptext7 0508                   __ptext8 03A5  
                 __ptext9 0319                   _dpowers 0013         __end_of_duty_send 0FAE  
                 _sprintf 044A    __end_of_Lcd_Write_Char 0078      end_of_initialization 07FC  
               Lcd_Port@a 0070                 _PORTBbits 0006                 _PORTCbits 0007  
         ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0075         Lcd_Write_String@i 007A  
              map@out_max 0063                map@out_min 0060               ___ftdiv@exp 0048  
              main@rotate 00B7               ___ftmul@exp 0035                 _Lcd_Clear 0F76  
        _Lcd_Write_String 00E6       start_initialization 07FC               __end_of_map 0319  
              ?_Lcd_Clear 0070           Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073  
               ___latbits 0002             __pcstackBANK0 0020             __pcstackBANK1 00A0  
                ?_Lcd_Cmd 0070               sprintf@flag 0027               sprintf@prec 0028  
        ___lwdiv@dividend 0072          ??_Lcd_Set_Cursor 0075                  ?___ftadd 0078  
                ?___ftdiv 003B                  ?___ftmul 002C                  ?___ftsub 0026  
                ?___fttol 004A                  ?___lwdiv 0070                  ?___lwmod 0077  
               __pstrings 0003          ___lwdiv@quotient 0074                  ?_sprintf 0020  
               _duty_send 0F97                  Lcd_Cmd@a 0073               ??_Lcd_Clear 0074  
               map@in_max 005D                 map@in_min 005A                _ADCON0bits 001F  
             __stringbase 0012                _ADCON1bits 009F          ??_Lcd_Write_Char 0071  
               main@speed 00BC                  _Lcd_Init 0161                  _Lcd_Port 0F81  
              ?_duty_send 0057  __end_of_Lcd_Write_String 0123    main@voltage_coefficent 00AF  
                ___awtoft 0FC6                  ___ftpack 01BC        __end_of__stringtab 0013  
              sprintf@val 0029           ___lwdiv@divisor 0070           ___lwdiv@counter 0076  
                __ptext10 0F97                  __ptext11 0FC6                  __ptext12 01BC  
                __ptext13 00E6                  __ptext14 004B                  __ptext15 0123  
                __ptext16 0161                  __ptext17 0F76                  __ptext18 0FAE  
                __ptext19 0F81        Lcd_Write_Char@temp 0072                 sprintf@ap 0026  
               sprintf@sp 002B               ??_duty_send 0059          ___lwmod@dividend 0079  
               stringcode 000D        Lcd_Set_Cursor@temp 0079                  sprintf@c 002C  
                sprintf@f 0020           ___lwmod@divisor 0077           ___lwmod@counter 007B  
                stringdir 000D                  stringtab 0003  
